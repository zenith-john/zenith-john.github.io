* DONE 我为什么鄙视（歧视）别人？ :扪心自问:
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: the_source_of_my_discrimination
:END:
世上有谁能够完美无缺，而不受别人的鄙视呢？将那些并非源于个人的因素，从出身地到
性别，作为鄙视别人的借口又有何道理呢？

话又说回来，世上又有谁能够完美无缺，有资格去鄙视别人呢？有意地忽视自己犯下的过错
却把鄙视的矛头对准其他人，这是否合理呢？但是那些虚伪做作者，那些道德败坏者，难道
不应该被鄙视么？

所有的鄙视难道不是出于个人莫名的优越感么？这种优越感的背后难道不是埋藏着更深的挫
败感么？或许是由于在同类中无法获得优越感，才将自己鄙视的目光投向那些“弱者”吧？如
果无法反抗生活的苦痛，至少也要剥夺别人的欢乐，这不正是歧视者的生活哲学么？又或许
是由于自身存在的必要已经无法获得确信，才通过歧视来寻找自己人生的意义和价值吧？那
这样的人生真的还有意义么？

虚伪做作，道德败坏固然不对，但是一边心中藏着龌龊的想法，一边道貌岸然地指责他人不
也是一种虚伪做作、道德败坏么？或许，正是他们的做法暗合了个人的幻想，使内心躁动不
安，才慌忙跳起来鄙视，来掩饰自己吧？

令人困惑的是，为何有时陈述事实也成了歧视呢？打着消除歧视的旗号来为自己牟取更大的
权利有合理性么？世界上确实存在着歧视，但是把一切问题都归结为歧视，而忽视更主要的
方面是否也是一种“歧视”呢？

既然歧视有着获得优越感受，确立人生价值，伪饰内心想法，牟取合理权利的重要意义，那
么消除歧视或许是不可能的吧！
* DONE 理性与感性 :扪心自问:
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: reason_and_sensibility
:END:
写这篇文章的最初想法来自于听《当代法国思想与文化研究》（这实际上是一门讲当代法国
哲学的大纲课）老师在说到在法国哲学中同时具有的理性和感性两大传统，形成二元的张力
结构，只是在不同的哲学家身上往往表现出其中的一个侧面。她举了一个极端的例子－孟德
斯鸠，他的两部作品《论法的精神》以及《波斯人信札》分别表现了这两大传统。事实上，
我认为理性和感性的分裂在所有人身上都是存在的。而我基于对于自己的了解试图剖析自己
身上感性和理性的分裂。


我先要谈一谈我对于理性和感性的认识的变化。在小学和初中早期我始终是一个坚定的理性
主义者。在这一阶段，我对于数学和自然科学有着坚定的信心。事实上，在这一阶段中，我
认为人的感性是完全的累赘。一个完美的人应该没有任何感性而具有完全的理性。这种想法
中，我事实上被现代科技取得的惊人成就所吸引。而这些成就可以说都是人类理性的结晶。
另一方面，在对于感性的认识上，我将感性和冲动划上等号，因而否认了感性的意义。


在初中阶段，我在继续学习自然科学的同时，开始了更多地阅读小说。事实上，这一阶段我
阅读了大量的网络小说。虽然，从我现在的视角来看，这些小说在剧情上过于乏味，人物设
定上趋向于单一，但是在当时确实激发了我的兴趣，使我看起来热血沸腾。除了网络小说，
我还阅读了一些名著，包括《三国演义》《水浒传》《百年孤独》《了不起的盖茨比》《忏
悔录》（卢梭著）。在这一阶段，理性开始逐渐失去其神圣的地位。因为文学作品向我展示
了一个感性的美好世界。因而，我开始逐渐认同感性的意义。


在高中阶段，我又有了两个新的认识。这两个认识互相矛盾，因而不断地考验着我对于世界
的认识。一方面，对于生物的了解使得我不可避免地有了一种还原论的倾向，即一切的思考
（理性）和情感（感性）都是大脑物质的反应。因而事实上我们处在一个决定论的世界中，
所谓的自由只是一种假象。从这个角度看，理性和感性的价值都被否定了，因为它们并不受
到人的控制。另一方面，我对于历史的了解，使得我发现理性并不那么光辉。理性在促进科
学进步的同时，也导致了剥削、殖民、战争。为什么说剥削、殖民、战争都是理性导致的呢？
因为资本主义的发展依赖于剥削，如果不剥削工人，那么生产的产品成本就会增加，不那么
有竞争力。只有通过剥削的手段，资本家才能够获利。但是，资本主义社会中财产总量总是
有限的，在资本家手中的越多，在工人手上的也就越少，因此，本地市场的购买力会制约资
本主义的发展。因此殖民地的诞生是资本主义发展的必然结果。但是地球也是有限的，如果
殖民地不够了，只能通过战争来获得殖民地或者海外市场。可以看出，这些行为的背后不是
资本家的贪婪而是经济发展的客观规律，使得每一个理性的资本家、资本主义政府必须作出
这样的决定。


值得一提的是，在一战和二战之后世界上都有对于理性的反思。在法国哲学课上，老师就提
到，人类理性的成果――科学技术――在被应用于战争后，居然给人类自己带来如此之大的伤害，
这对于理性主义者而言是一种强大的冲击。而当我从马克思主义的视角重新审视人类历史时，
我也受到了强烈的冲击。一个纯粹的理性的世界逐渐变得恐怖起来。鲁迅在《藤野先生》中
曾经说到：
#+BEGIN_QUOTE
这一学年没有完毕，我已经到了东京了，因为从那一回以后，我便觉得医学并非一件紧要事，
凡是愚弱的国民，即使体格如何健全，如何茁壮，也只能做毫无意义的示众的材料和看客，
病死多少是不必以为不幸的。所以我们的第一要著，是在改变他们的精神，而善于改变精神
的是，我那时以为当然要推文艺，于是想提倡文艺运动了。
#+END_QUOTE


到了大学，我有了更加深刻的体会。单纯的理性只能使人成为机器，只会导致理性的灾难。
这使我不能不认为感性是必要的，甚至于感性是人性中更加重要的一部分。人的自由意志是
否存在这是一个问题，但如果人存在自由意志，那么，感性便是必要的。[fn:1:不过需要指
出的是，我上文所强调的理性的灾难，主要指的是个体的理性灾难，比如说囚徒困境。如果
存在全局理性的话，可能这种灾难就不存在了。但是，全局理性和个体理性之间很可能会产
生矛盾，而这一矛盾如何解决目前还看不到希望。]


值得一提的是，我感觉目前的教育中感性是缺失的。[fn:2:利益相关，我是高考的受益者，
省26名，语文114分。]在上高中时，第一任班主任就向我们强调，语文也要强调理科思维，
无论是回答阅读题还是写作文一定要思路清楚，理科好的人文科也要好。到了高三，更是把
答题的套路明明白白地告诉你，使你要按照规范去答题。因而我一直很喜欢看阅读题的文章
却一直很讨厌阅读题。因为在阅读题中，一切感动、反思都必须让位于理性的回答。而且在
我看来很多时候答案是空洞的，甚至是牵强的理性的回答。丰富的感性可能在这里被理性所
统一，被理性所扼杀。当然，作为考试，它必须要有一个统一的标准来给分。但是，在高考
引导的教育的大背景下，不能不说是感性教育的一个悲剧。


在相同的情况下，人的感性和理性往往会导致不同的行为。比如，拖延症就是感性和理性不
协调的结果。一方面，理性上早做晚做，都得做，因而不应该拖延。但是感性上却希望能够
将痛苦延后。反目效应也是一个例子。这说明感性和理性在很多时候并不是统一的。人的行
为往往是二者中和的结果。同一个人，比如孟德斯鸠，很有可能在一些事情上，表现出非常
感性的一面，而在另一些事情上，表现出非常理性的一面。这就是我认为的理性和感性的分
裂。


在谈到国庆阅兵时，我说当我看到武器装备从我面前经过时，我流下了热泪。我的一个朋友
就说我的人设崩塌了。事实上，我一直觉得我是一个感性和理性分裂非常严重的人。因而很
有可能别人只关注到了我理性的一面，而忽视了我感性的一面。在听到抗美援朝的将士在冰
天雪地中被冻死依然坚守岗位，在听到一位被美国俘虏的抗美援朝老兵在几十年后被追授奖
章的故事时我都几欲落泪。当阅读《共产党宣言》时，我也感到热血澎湃。很多时候，我不
为所动，并不是意味着我铁石心肠，而只是那些故事不值得我为之感动。


当然，我也有我自己很理性的一面。我偏爱数学以及自然科学。我能够欣赏其形式逻辑之美。
我也喜爱马列主义的原著，以及毛泽东文选，他们都是理性分析问题的典范之作。仅仅给出
断言是不能够使我满意的。曾经看到过一句我深感认同的话：一个人说的话，如果没给出理
由，即使是院士说的，你也不要相信。理性的背后是逻辑，如果缺失了逻辑，理性就变为了
感性。笛卡尔曾经说过：“怀疑一切。”怀疑什么？怀疑一切无理由的信仰。这就是我理性主
义的一面。


理性和感性的分裂，并不意味着理性和感性的矛盾。再次强调人的行为是理性和感性统一的
结果。而且在人性中理性和感性是不可缺少的。没有感性，人就成为机器；没有理性，人就
成为动物[fn:3:虽然作为生物系的学生，我知道人也是动物，但为了对偶，我还是这么说
了，这就是感性的表现吧。当然我补上这一段注释，就是理性的表现了。]。事实上，理性
和感性都具有自己的局限性，因而需要互相补足。比如，在考虑人生的意义这种问题上，理
性往往会走进死胡同。很多人依靠理性不停地追问，最后还是求助于上帝。而另一方面，在
分析现实问题的时候，单纯依靠感性做出断言是不能够使其他人信服的。从这个意义上说，
理性更像是人类的共性，它使得每个人之间可以互相理解。而另一方面，感性是人的个性，
它使得每个人会有不同的目标，不同的价值取向，每个人有自己的精彩人生。当然，在感性
中我们也能建立共性，使得一个集体有一定的共同价值观，这样一个集体才能够良好地发展。


总而言之，理性和感性都是人性，而且都是人性不可缺少的部分。尽管有时它们在同一个人
身上产生出表面上的分裂，但是对于人而言，由于它们本身所具有的缺陷，这种分裂是必须
的。因而每个人，不仅应该学会大胆使用他的理性，也要学会合理使用他的感性。

* DONE 南京旅游思考
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: travel_in_Nanjing
:END:

今年五月劳动节，我再次到南京游玩。回来后就想写一篇文章，但是一直拖到了现在，实在是惭愧万分。

南京之行拜访的景点并不偏僻：南京博物院，中山陵，明孝陵，美龄居，还有钟山风景区。其秀丽的风光前人之述备矣。旅途中有些许见闻却是值得一叙的。

在中山陵景区间，景区车辆与外来车辆交织在一起。车辆堵得厉害，于是乎等待景区车辆的人便积了起来。车站本身有围栏理应排队，同时也有人检票。然而随着人数的增加，队伍蔓延到了车站之外。这景区的观光车是敞开式的，没有车门。随着耐心消耗殆尽，偏有人动了歪脑筋。待车一停，就有人从车站外越过队伍冲上车去，如此便可越过队伍，省去很多时间。最开始工作人员坐视不管，因而排队的人和插队的人发生了冲突。情况逐渐混乱，工作人员已无法管理，场面渐渐失去了控制。最后来了更多的工作人员才恢复了秩序，把队又排了起来。

此情此景，激发了我的一些思考。我的心中存在着两个问题：一，景区车辆与社会车辆共同在景区道路上行驶是否合理？二，如何确保车站的秩序，车站的秩序应该由谁来管理？
关于问题一，我需要做一些进一步的补充。首先，景区道路，除了景区的观光车和外来的各种机动车，还有部分共享单车和行人。各种交通工具的混杂导致了秩序的混乱，因而使得本就不算宽敞的道路堵塞较为严重，限制了观光车的运客能力。另一方面，由于观光车是没有车门的敞开式，因此，如果发生意外，乘客很容易受到伤害。而在外来车辆涌入的情况下，发生意外的可能性是加大的。因此我认为并不应该使得景区车辆和社会车辆在相同的道路上行驶。

我能够理解这一设计的存在。一方面，有部分宾馆处于景区内部，如果没有私家车到达这些宾馆会较为困难。另一方面，如果仅仅有景区的车辆那么对于“宽敞”的道路是一种浪费。但是我认为可以通过让宾馆和景区协商来准备负责接送的方式将所有的私家车辆阻隔在景区外，这样对于安全和效率都是有益的。首先，它避免了外来车辆和观光车的混杂。其次，它也兼顾了宾馆的利益。通过降低道路的负荷，使得道路更加通畅，使得住在宾馆内的游客也能够有较好的旅行体验。

关于第二个问题，我也要做一些说明。车站的秩序显然应该是由景区的工作人员来管理的。但是当队伍出现混乱出现插队情况时，工作人员并未第一时间站出来，而是等到游客之间起了冲突之后才维持秩序。这里体现了部分工作人员事不关己，高高挂起的心态。这一心态的产生是由于权责的不清晰。虽然是景区的工作人员，但是他们可能认为自己的工作只有检票而管理秩序并不在他们的工作范围内。因此对于这种插队的行为听之任之，以至于演变为更加严重的冲突。同时，工作人员很难有足够的权力对于违反景区相关秩序的人进行处罚，使得违反规章的成本是非常低廉的。

这让我想到了当初在莫高窟的见闻。莫高窟内，为了保护文物是严禁拍照的。但是当时，在参观时我们团队中有人开了闪光灯照了相，而导游也仅仅只是生气地看了他一眼，而没有更进一步的举措。包括在故宫一些雕刻会有人用手去触摸，而工作人员只能无力地让他不要摸。不继续摸不能挽回对于文物的破坏。这样的例子数不胜数。我国有《文物保护法》，但是事实上，由于景区自身权力的不足，因此文物并不能很好的得到保护。这些人的行为不是隐蔽的，而是当着工作人员的面的，但是他们就是可以胆大妄为，因为缺少有效的惩戒措施。当然管理排队相比于保护文物来说可能没有那么重要。但是这些例子都体现出了旅游景区管理制度的脆弱性，因为没有匹配的惩罚措施，因此这些制度很多时候只能用于限制君子，而不能够用于规诫小人。我认为，应该给予景区一定的权力（比如罚款），来处罚违反景区制度的人。俗话说，县官不如现管，只有景区有权力，才能够真正有效地管理秩序。

虽然中国的旅游业随着中国经济的发展，人民生活水平的提高在近年来飞速地发展，但是中国旅游的管理依然还很落后。这体现在中国部分旅游景点短视的过度商业化（乔家大院最近因此被撤除了5A级旅游景点），也体现在旅游景点在保障游客观览体验上的不足。过度商业化的出发点是旅游景点的谋利。除了少部分景点，其运营有国家的保障，大多数的景点其需要通过商业化来弥补运营的成本。因此，提高票价、进行捆绑售票、增加商铺以获得租金等成为了立竿见影的解决方案。而这些解决方案，虽然能够解一时燃眉之急但是确实伤害了游客的观览体验，长此以往对于景区的客流必然会造成负面的影响，进而严重损害景区的收益。我更加赞赏故宫采用的买周边这种扩展其价值的方法。当然，故宫的影响力远远超过其他景区，因此它卖起周边来也相对容易。但是其他景区可以采用类似的方法来挖掘景区的价值，而不仅仅盯着门票和店铺租金。正因紧紧地盯着门票的收入，因此，很多景区不愿意采用限流的方法。因此大量的人涌入景区使得景区的观赏性受到了严重的损害，同时也使得景区的秩序管理更加的困难。在我看来，通过限流来提高观览体验，同时促进附加的餐饮、娱乐等项目的消费，是比通过记人头的门票来获利更加有持续性的方法。

PS:本来想谈一谈中国和外国的旅游观的不同，但是和这篇文章内容关系不大，留待以后有机会再讨论。

* DONE TI9 感想
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: ti9
:END:
非常遗憾，今年TI9，中国没有获得冠军，甚至没有进入决赛，大概这是中国 Dota 除TI3 最差的TI 成绩了。

从常规赛的表现看，今年中国战队的表象和去年相差无几，都获得了2个Major 的冠军。而且今年的 Major 数量远少于去年，因此可以说是非常不容易了。但是很遗憾的是，两夺冠军的VG在TI上也没有走得够远。事实上，从TI4，以来，中国 Dota 的实力基本上是逐年下降的。TI6 Wings 夺冠可以说是最后的辉煌了。TI7 基本上是回光返照，LFY在之前和之后都没有打出好的成绩，Newbee 决赛被3:0后更是一蹶不振。TI8 可以说是全线溃败，只有 LGD 勉强维持住了尊严。而TI9，虽然来到中国，但是结果依然让人失望。而且，我也看不到，更多的崛起的希望。缺少新鲜血液，青黄不接是不容否定的事实。（事实上，不少中国的体育运动，如羽毛球，都存在这样的问题）Maybe 依然是中国最好的中单，Fy 依然是中国最好的4号位。这种荣誉对于他们个人是一种肯定，对于中国 Dota 而言，无疑是一种悲哀。

再辉煌的历史也无法掩盖现今的疲软。唉，还是希望中国 Dota 能够继续加油吧。
* DONE 一个国庆群众游行的亲历者――可以言说和不可以言说的东西
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: An_Experienced_Person_In_Parade_Of_70th_Anniversary_Of_Founding_Of_PRC
:END:

我很荣幸作为清华大学的一员参加了国庆70周年的群众游行。作为“伟大复兴”方阵的一员，当走上长安街，走过天安门时，我的大脑几乎是一片空白。动作几乎都伴随着练习中形成的肌肉记忆完成，音乐弱不可闻，周围是同学和老师们激动的呐喊。什么标齐，什么动作的切换，在节日的氛围中完全地被遗忘，只记得将目光投向天安门城楼上的总书记。通过天安门城楼的那一刻，或许半个暑假的辛勤汗水，几个难眠的昼夜，疲劳和等待，焦虑和担忧，都拥有了完全不同的意义。在这一刻，我是中华民族历史时刻的见证者和参与者。我为中国感到骄傲和自豪。这种骄傲感和自豪感不同与得知中国总GDP升至世界第2位，得知中国嫦娥号成功登月，以及其他种种事件时的自豪感，因为在此刻我是历史的创造者。这种差异是语言难以言说的。在此刻，我的背后是千千万万的祖国人民，我背负着他们的期许。我是他们中特殊的一员，因为我有幸能够亲自踏上长安街的土地；但我也是他们中平凡的一员，我们都有一个共同的中国梦。



除去经过天安门的这一刻，在这次专项活动中，我也有很多特殊的回忆。记得有一次，雨天在东操训练时，下起了小雨。但是参加活动的各位同学都服从组织的安排，继续训练，没有一个人去拿雨衣或者躲雨。指挥的老师高声称赞“勇敢的清华师生冒雨训练”。话音刚落，毛毛细雨瞬间化为倾盆大雨。汗水混杂着雨水浸透了衣衫，害怕同学们生病，训练就此取消了。


还有一件事使我感到非常的遗憾。有两位同学，他们参与了每一次的合练，牺牲了自己的课余和休息时间，但是最终由于工作人员的失误，他们的名牌出现了错误――两个人的照片和名字发生了错位。因此两位同学最终没有出现在长安街上。两个月的努力因为不可抗的外力在一瞬间化为了虚无。如果这种事情发生在我的身上，我一定会气愤至极。但是，其中一个同学（他原来就在我的后面）却表现地非常平静，已然原谅了那个犯错误的人。或许这种包容心是我应该学习的吧。


其实，我个人并不是一个关心军事的人。（我或许要说的更加清楚一些，我并不是不关心中国的国防建设，而是我对于各种武器装备的具体设计和实际效果并不那么清楚，也不那么感兴趣。）但是，今天当各种新式的武器装备从我面前经过时，我却不由自主的湿润了眼眶，流下了泪水。我们不能忘记，在仅仅一百年前，中国面临着怎样的内忧外患，时时具有国将不国的危险。而今天我们能够屹立于世界之东方，所依赖的不正是强大的国防实力么？邓小平曾经说过：“如果60年代以来，中国没有原子弹、氢弹，没有发射卫星，中国就不能叫有重要影响的大国，就没有现在这样的国际地位。”同样，如果当代中国没有先进的战斗机，先进的驱逐舰，先进的战略导弹，中国就不能维持中国的国际地位，就不能有与美国叫板的勇气和底气。但是这样的先进技术，这样的国际地位，不是天上掉下来的，更不是西方资本主义、帝国主义施舍给我们的。而是我们祖国的英烈们用血淋淋的生命换来的，是前辈们放弃自己的美好生活，甘愿投身于隐姓埋名的工作换来的，是一代又一代的奋斗者知耻而后勇，用一腔热血回应祖国的期待换来的。他们用自我牺牲为我们的美好生活铺路，但是有些人却一天美好生活都没有享受到。


我的奶奶恰好在新中国成立一天出生。她经历了共和国的风风雨雨。我家庭的命运也和共和国的成长息息相关。我的奶奶和爷爷都几乎没有读过书，与田地相依为命。他们经历了三年困难时期，熬过了饥饿的岁月。伴随着恢复高考，中国教育事业的不断发展，我的父母都成为了大学生。尤其是我的母亲，她是中国的经济体制改革的亲历者。她经历了上海证券交易所的建立，伴随着对外开放，她又和国际贸易打起了交道。生活在中国大地上的每一个人，都将自己与祖国的发展紧密地联系在了一起，我们与祖国同呼吸，共命运。共和国的痛，痛在我们的心头；共和国的乐，乐在我们的酒窝。这生我养我的土地怎能不让我深深地热爱，怎能不让我滴下滚烫的泪珠？我想下面的两首诗和一首歌确实能够刻画我的心情吧。


#+BEGIN_VERSE
《我骄傲，我是中国人》

在无数蓝色的眼睛和褐色的眼睛之中，
我有着一双宝石般的黑色眼睛，
我骄傲，我是中国人!
在无数白色的皮肤和黑色的皮肤之中，
我有着大地般黄色的皮肤，
我骄傲，我是中国人!
我是中国人--
黄土高原是我挺起的胸脯，
黄河流水是我沸腾的热血，
长城是我扬起的手臂，
泰山是我站立的脚跟。
我骄傲我是中国人。
我是中国人--
我的祖先最早走出森林，
　　我的祖先最早开始耕耘，
我是指南针、印刷术的后裔，
我是圆周率、地动仪的子孙。
在我的民族中，
不光有史册上万古不朽的
孔夫子、司马迁、李自成、孙中山，
还有那文学史上万古不朽的
花木兰、林黛玉、孙悟空、鲁智深。
我骄傲，我是中国人!
我是中国人--
在我的国土上，
不光有雷电轰击不倒的长白雪山、黄山劲松，
还有那风雨不灭的井冈传统、延安精神!
我是中国人--
我那黄河一样粗犷的声音，
不光响在联合国的大厦里，
大声发表着中国的议论，
也响在奥林匹克的赛场上，
大声高喊着"中国得分"!
当掌声把五星红旗送上蓝天，
我骄傲，我是中国人!
我是中国人--
我那长城一样的巨大手臂，
不光把采油钻杆钻进外国人预言打不出石油的地心;
也把通信卫星送上祖先们梦里也没有到过的白云;
抬头，当五大洲倾听东方的时候，
我骄傲，我是中国人!
我是中国人--
我是莫高窟壁画的传人，
让那翩翩欲飞的壁画与我们同往。
我就是飞天，
飞天就是我。
我骄傲，我是中国人!
                    ——王怀让
#+END_VERSE

#+BEGIN_VERSE
《我爱这土地》

假如我是一只鸟，
我也应该用嘶哑的喉咙歌唱：
这被暴风雨所打击着的土地，
这永远汹涌着我们的悲愤的河流，
这无止息地吹刮着的激怒的风，
和那来自林间的无比温柔的黎明……
——然后我死了，
连羽毛也腐烂在土地里面。
为什么我的眼里常含泪水？
因为我对这土地爱得深沉……
                    ――艾青
#+END_VERSE

#+BEGIN_VERSE
《我们就是中国》

作词：王利芬

我的喜悦开着你的花朵
你的悲伤积淀我的负荷
我的欢笑飞舞在你的皱折里
你的泪水浸泡我的心窝
我的落叶抖动你的贫弱
你的步伐点击我的脉搏
我的根须盘绕在你的土壤里
你的记忆生长在我的村落
中国 我对你说
我就是你 你就是我
我们就是中国
中国 我对你说
我就是你 你就是我
我们就是中国
#+END_VERSE


我坚定地相信，我们新一代青年绝不缺少爱国之心。只是我们朴素的表达，往往被视作是幼稚和愚蠢。总有人时时提醒我们要看清足下那几步路，却少有人赞许我们广阔的宏图。但是只要有一个机会，我们这一代青年总会爆发出强大的力量，回应祖国的期许。这次国庆游行，正是我们力量的体现。多少北京的大学生参与了游行，他们不喊苦，不喊累，圆满地完成了这项任务。他们向我展示了青年的力量，而我确信怀有爱国之心的青年人决不只有我们。前辈们终会将建设中国的接力棒传到我们手上，而我相信我们这一代，像这一次游行一样，一定不会辜负全国人民的嘱托和期待，一定能够给全中国人民一个满意的答复。


让我以我们方阵的口号结尾：祖国万岁，青年加油。


PS:值得一提的是，作为十八方阵的一员，我们离总书记最近的一次不是经过天安门时，而是总书记乘检阅车经过我们前面的部队时。
* DONE 关于施一公
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: ShiYigong
:ID:       ea6f0fec-ad85-4d0d-a22d-44c59ccc2378
:END:
今天，看知乎时，又看到了不少黑施一公的评论。总结可以分为以下几点
- 劝人学生物。
- 实验室流水线作业发文章。
- 工作是简单重复，没有技术含量。
- 不鼓励科技人员创办企业。
- 做人浮夸，虚荣。


虽然很多人说劝人学生物没得洗。但在我看来，也还算合理。虽然确实生物学就业比较困难，而且工资也不高。但是，如果你要钱，为什么要来搞科研。而生物学这个专业基本上就是科研导向的。如果不做科研，生物系的大部分知识只能让你成为一个高级的搬砖工而已。如果一个人本身对生物毫无兴趣，听了别人的一席话就以为学个生物就能名利双收，那可以说就是缺少自己的判断力了。[fn:1:说实话我也没找到原文，如果说是那句“21世纪是生命科学的世纪”的话，这话也不是他第一个说的，只是他的影响力比较大罢了。]事实上，不仅仅是生物，任何一个行业，你要是想要名利双收都必须花一番苦功夫。大家推崇的计算机专业也不过是中位数比较高而已。


实验室流水线作业发文章。这点似乎没有内部消息，感觉上像是大家的主观臆测，因此不予评价。[fn:2:其实我觉得如果有一种能够让我不停地发CNS 文章的方法，我也上啊。我也要吃饭的呀。]


关于“工作是简单重复，没有技术含量”这点，我觉得是要打一个问号的。“工作是重复，缺少创新”可能是更加恰当的表述。不过，从马克思主义的观点看，分工合作是生产力发展的必然嘛。像施老师这样擅长解结构的人去解结构，让其他人去干他们更专业的事不是更好。知乎上最好笑的是总有人说，这样是不可能拿到诺奖的。我觉得他们可能是在搞笑，世界上能够拿诺奖的人能有几个[fn:3:更何况还有拿了诺奖，因为生病最后把奖牌卖了的。你说诺奖重要还是吃饭重要https://huanqiukexue.com/a/qianyan/More_than_Science/2018/1022/28154.html]。如果都以诺奖为目标，那么中国绝大多数科学家都可以回家种田了。科学需要有向天空探索的人，也需要有更多的人在地上耕耘。当然，其实我对于施老师拿了那么多经费也是颇有微词的。


关于不鼓励科技人员创办企业这一点，倒是可以找到施一公的原话
#+BEGIN_QUOTE
压死骆驼的最后一根稻草是什么呢？是鼓励科学家创办企业。大家没听错，今年在人大会议我听到这个话后觉得心情很沉重。术业有专攻，我只懂我的基础研究，懂一点教育，你让我去做经营管理，办公司、当总裁，这是把我的才华和智慧用到了错误的地方。人不可能一边做大学教授，一边做公司的管理人员，一边还要管金融。
#+END_QUOTE

这句话有什么问题呢？我觉得主要的问题在于他不鼓励科学家创办企业却使用了错误的理由。事实上，我觉得他后半句段话还是有一定道理的。但是，我认为后半句的理由只能说明科学家不应该自己去参与管理，投资，而应该通过合作的方式，与专业的管理人员，金融人员合作将科学创新投入到生产实践中去，实现科研成果的落地。


关于做人浮夸虚荣这点，我也不予评价。如果有谁能给一些具体示例的话，还可以分析分析。不过我觉得人品和他的科研成绩并没有什么太大的关系。不能用人品来否定他的科研成果，也不能用科研成果来抬高他的人品。


其实我觉得大家对施一公的批评是有一定道理的。但是，施一公也说过：“科学家也是人。”如果一个科学家才德兼备，我们当然应该赞赏他。但是，作为一个人而言，科学家也有他的七情六欲，他也想要追逐利益，追逐名声。真正能够做到为科学献身的人毕竟还是不多的。如果你愿意为科学献身（也许你还得不需要经费），那你就不需要批评施一公，因为他没有妨碍到你。如果你需要工作，需要经费，那你反而应该学习施一公，看看他如何发一篇又一篇的CNS，如何获取一年又一年的经费。不满来自于对于施一公的神化，如果把施一公看作一个人那么他的行为完全是可以理解的。[fn:4:可以理解并不意味着正确或错误，也不意味着不能够批评。]他的行为很多时候只是自私而已，是在当前的体制下谋取利益的最大化，但是谁又没有自私心呢？或许，只是因为他站在一个更高的地位，使得他自私的表现能够被人群看到而已。[fn:5:其实我一直想吐槽的一点是既然大家觉得科研如此简单，为什么大家没有变成“施一公”，名利双收，而只是在知乎上宣泄怒气。][fn:6:可能有人认为施一公作为有威望的知识分子应该改变中国的学术体制，但是我始终认为要想体制的既得利益者来改变体制是一种美好的奢望的。]

* DONE Compare Scapple, CmapTools and yEd Graph Editor
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: graph_editors
:END:
最近在寻找绘制概念图的工具。概念图与思维导图不同，它是无中心的，也就是说它不是从中心发散的网络结构而是一个自然的网络结构。

首先发现的是 [[https://www.literatureandlatte.com/scapple/overview][Scapple]]。这个软件的优点在于绘图非常自然，比如双击创建图案等，较为人性化。但是由于它箭头的类型较少，同时对于箭头进行标注不是很自然，除此之外，它还缺少其他二者所有的分析的工具。因此首先放弃。（PS:Scapple 付费且只支持 Windows 和 Mac OS）

[[https://cmap.ihmc.us/cmaptools/][CmapTools]] 是一个专门用于绘制概念图的软件。它有分析关系的功能是最好的，有连接词的概念，同时具有能在不同的概念图中建立关系的能力。但是它在自己指向自己的箭头方面不是很自然（可能设计者不认为会有这种情况出现）。同时它将一个已有的节点变为 Nested Node 并在其中添加内容也不是很方便。CmapTools 的另一个问题是他的搜索功能较弱，不能够查找添加的 information，而只能查找所展示的概念。同时，CmapTools 的大纲也不是非常好用。

[[https://www.yworks.com/products/yed][yEd Graph Editor]] 是另一个绘制示意图的软件。它对于 CmapTools 的两个问题都有所改进，代价是牺牲了不同概念图之间建立关系的能力和对于谓词的分析能力。它的分析主要是以节点为中心的。它的问题在于不能很好地使用连接多个概念的谓词，需要手动添加节点，而手动添加的节点又往往会使图示不那么清楚。另外由于 yEd Graph Editor 不仅仅是一个概念图软件，因此它可以选择的元素很多，可以用于绘制包括流程图在内的各种图片。

我个人最后选择的是 CmapTools，因为我个人的需求比较单一，而 CmapTools 能最好地满足我的需求。在 CmapTools 之外我偶尔会使用 [[https://graphviz.org][Graphviz]] 通过编程进行绘图。但 Graphviz 也无法解决多个概念的结合问题同时 Graphviz 绘制的过程中并不直观。

* DONE Cornell Learning Strategies Center 学习总结
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: cornell_learning_strategies_center_review
:END:
参考文献：https://lsc.cornell.edu/

我主要关注的是 Guideline for Creating a Study Schedule， 3 P’s for Effective Reading， Textbook Reading Systems， Cornell Note Taking System 以及 Concept Map 5 篇文章。对我个人来说，具有启发意义的几点是：
1. 不要高估自己的学习能力。这点在我的 GTD 过程中深有体会，经常我会高估自己的理解能力、意志力，最后导致在预期的时间内没有得到好的结果。
2. 要有规律地进行复习。事实上，这几篇都非常强调复习的重要性。所谓 Cornell 笔记法，就是一种面向复习，从而进一步加深理解的笔记方法。事实上，它并不仅是一种笔记方法也是一种思考的方法。它强迫学习者对笔记的内容的意义和重点进行思考。而在复习过程中 Concept Mapping （概念图）是一种非常有效的复习方法，能够检验你对于概念的理解以及对于各个概念之间的关系。
3. 强调目的性。3P 指 Purpose，Preview，Plan。SQ3R 指 Survey， Question， Read， Recite， Review。P2R 指 Preview，Read，Review。S-RUN 指 Survey，Read，Underline，Notetaking。这些方法核心在于以目的作为导向，要有大的轮廓，再填充细节。在我个人的经历中，抱有目的和问题在学习中会使人有更深的印像，对于内容的理解也会更好。
4. 强调笔记的目的是为了复习。笔记不是为了记而记，笔记是为了未来的自己所用的，因此在记录的过程中要抓住这一点对笔记进行组织和整理。

* DONE 关于公知的几条评论
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: Gongzhi
:END:
所谓“公知”原意指公共知识分子，是一个中性词。在长期的使用中，形成了较为固定的指向，即指向亲西方、宣传西方制度的知识分子。在目前的网络环境中这部分人是被抨击的对象。

我个人非常反对用一个名词对人作简单的划分，因为列、斯、毛、邓都是马克思主义者，但他们的思想却有很多的不同。所有单独用一个词很难表现出一个人思想的全貌。但是这一个名词的出现，说明了一个独特的社会现象，因此有分析的必要。

谈论公知的出现这一社会现象，就不能脱离其历史的背景。可以说在改革开放之后，中国人开始重新认识西方世界。中国人在比较中产生了巨大的心理落差，尤其是在改革过程中不断地遇到挫折，使得部分人产生了对于自身制度的不自信。在十年浩劫中受到伤害的知识分子，作为最先接触西方文化的人，很自然地会分化出亲西方的一部分。在改革不断受挫、中西方在经济科技上客观存在的巨大差距、西方媒体的巨大舆论优势以及中国知识分子对于西方文化认识的片面性共同导致公知在国内舆论中长期居于优势地位。这里必须说明的是，这种认识的片面性不一定是能力的问题，而是和对事物的认识从肤浅到深刻，从片面到全面的客观规律相符合的。我们今天能够更好地批判西方的文明，是因为我们站在前人的肩膀上，对于西方文化有了更全面的认识，不仅了解了他们的宣传工具想让我们看到的，也了解了他们所隐藏不想让我们看到的。而最早的知识分子要能够看得这么清楚几乎是不可能的。

因此，在我看来公知这一群体的形成很难说完全是西方用钱收买的结果，而自有其客观的历史条件存在。不是每个知识分子都有足够长远的战略眼光。在当时中囯落后于西方的情况下知识分子要找原因来对症下药。有的人认为是制度问题，有的人觉得是国民劣根性。在这些人中，当然有指鹿为马，认贼作负的敌人，但也有学力不足，对局势产生误判的人。要知道知识分子很多，其水平各有不同。即使是局座，不也翻过好多次车么？如今批判那些当初认为是制度问题的公知也并非是因为批判者有战略眼光，而是因为历史给了我们这一代人上一代人的问题的答案。从2008年以来，中美实力迅速接近，西方资本主义国家揭开了民主、自由的温情面纱，展露出粗暴的獠牙，但这些变化在十几年前还是难以想象的。因此，我们应该更多地批评他们的言论而非他们个人。当然，如果时至今日，还看不清局势，那么无疑不是蠢而是坏了。

可以说，与改革开放初期相比，中国的国民意识已经发生了巨大的变化。如果说在90年代，邓小平还强调：“中国要警惕右，但主要是防止‘左’。”（《邓小平文选》人民出版社 1993年版 第三卷 p.375 《在武昌、深圳、珠海、上海等地的谈话要点》）现在，我认为我们要警惕左，但主要是防止右，尤其要防止自由主义，空谈抽象的自由。因此对于公知言论的批判是完全有必要的。

有人会担心，现在批美、批资的很多言论都具有片面性，可能会使大众对于双方的实力有错误的认知，也加大了左的危险。我承认这样的风险是存在的，所以我希望有这些担扰的人能够冒着被打为公知的危险去完善那些片面的观点。必须指出的是，在实践中，片面性是很难避免的。一，一个人的知识储备是有局限的，因此作者难免有不了解的事实，甚至可能有错误的认知存在；二，人非圣贤，推理过程中也可能存在考虑不周的情况；三，人的判断或多或少会受到主观因素的影响；四，文章的篇幅等原因可能会使作者对材料有所选择。片面性当然是问题，但有多个片面来看问题，认识不就全面了吗？毛主席1957年《在中国共产党全国宣传工作会议上的讲话》至今仍有启发意义：“对于这些片面地看问题的人，应该进行批评，当然要以惩前毙后，治病救人的态度去批评，帮助他们……片面性往往是难以避免的，有些片面性也不是不得了，要求所有的人看问题都必须很全面，这就会阻碍批评的发展。……如果你写错了，那末，有批评就可以帮助你改正，这并没有什么不好”。但是毛主席也强调“必须是满腔热情地用保护人民事业和提高人民觉悟的态来说话，而不能用嘲笑和攻击的态度来说话”。如果做不到这一点，就和公知无异了。

因此，片面的观点固然需要批评，但也要讲究方法。我觉得有两点比较重要，一是对事不对人。如果说的有道理，那么即使是敌人的话我们也要听，如果说得没道理，即使是人大代表的意见我们也要批评。正如《论语》所说，“君子不以言举人，不以人废言”。二是指向明确。批评不是简单的是非判断，而要具体指明哪一步的推理有问题，哪一点事实是错误的，或者提供新的材料来支持或反对作者的观点。新的材料可以是统计数据，也完全可以是个人的经验。有些人看不起个人的经验认为其具有偶然性，甚至可能是编造的，但是要注意，如果一个个人经验被很多人认同，那它就有可能是普遍现象，而统计数据在处理过程中产生的信息丢失使其有时也会有误导性。我认为这两者都有一定的价值，不必厚此薄彼。批评应该具体，而不仅仅作为情绪的宣泄。否则，它就不能改变作者的错误认识也无法引发其它观者认同。批评的过程不仅完善了被批评者的思想，也加深了批评者对问题的认识。

知易行难，愿与君共勉。

* DONE 我的工具
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:ID:       aef3fdaa-e82b-46d4-ba6e-213d4eb2812c
:EXPORT_FILE_NAME: my_tools
:END:
** Manjaro Linux
目前我使用的发行版是Manjaro Linux，这个发行版基于 Arch 但是有图形化的安装界面对于新手更加的友好。使用这个发行版的好处是有大量的软件可以使用，其数量甚至超过 Ubuntu PPA，而且软件的更新速度非常快。当然也有很多不好的地方，不如很多软件包是个人维护的，最后可能就没人维护了。这种事情也常常发生。更新速度太快也可能会导致一些软件的 bug 被推送，比如我个人遇到过 ripgrep 的 bug。不过我个人的体验还是非常满意的，它的优点大大超过了它的缺点（做为桌面系统）。当然，我有了清华的源 [[https://mirror.tuna.tsinghua.edu.cn/]] 来加快速度。
** KDE
目前我使用的桌面环境是KDE，最开始转到KDE的原因是为了使用大佬的[[https://github.com/manateelazycat/emacs-application-framework][Emacs Application
Framework]]，但是经过一段时间的使用后发现还是不太适合我个人的工作流，因此就放弃了。
但是在使用的过程中也发现了KDE环境有很多的优点，因此就一直使用了下来。使用平铺式
桌面环境的一个痛点在于很多软件的设计对于平铺桌面非常不友好。在KDE中可以避免这一
个烦恼。

对于我个人而言比较重要的配置有以下几点：
1. 选择一个你比较喜欢的主题和图标，我个人的选择是 Breeze Dark，和它配套的图标。
2. 选择字体，我使用的是 Source Han Sans CN
3. 关闭一些不必要的桌面动画，比如切换虚拟桌面的动画，因为我经常切换虚拟桌面因此
   动画会让我感到厌烦。
4. 将虚拟桌面数量固定为4。选择4这个数字是因为我的键盘只有左Windows，因此同时按
   Windows 和 4 就已经比较极限了。同时4个虚拟桌面的数量已经足够满足我的个人需求。
5. 开机自启动。我有一个 zstart 程序来进行我需要的开机自启动。
6. 键盘设置。使得 Caps Lock 变为 LControl。使用 Emacs 的都懂。通过 xcape 进行更
   多的设置，在 zstart 中更多地进行介绍。
7. 关闭 File Search。这点非常重要，由于KDE的文件搜索缓存引擎 Baloo 对于非拉丁语
   系的支持非常不好，如果不关闭在搜索中文时就会一无所获，因此必须进行关闭。
8. 设置快捷键。这点对我而言非常重要。我会选择直接覆盖默认的快捷键。Win + num，切
   换虚拟桌面。 Win + Shift + num，移动窗口到虚拟桌面。 Win + m，最小化。 Win +
   0，最大化。 Win + i,o,k,l,u,y，分别打开 Firefox, Okular, Konsole, Dolphin,
   Emacs, Zathura。这一点在 wmctrl 中会进一步介绍。 Win + p，运行命令 rofi -modi
   combi -combi-modi window,drun -show combi。而 Windows 键可以运行我自己的脚本
   [[https://github.com/zenith-john/ZSelectWindow][ZSelectWindow]]。Win + Left, Right，将窗口分配到左右半屏。Win + Up, Down，将桌面
   分配到右上角，右下角。 Win + Shift + q 关闭窗口。
9. KDE widget, global menu 类似 Mac 的效果使得软件有更好的体验，遗憾的是并不是所
   有的软件都支持，如 Firefox(但是可以通过 firefox-ubuntu-bin 获得)。

** KDE系软件
相比于 Gnome 而言确实 KDE 系的软件要好看不少。我个人比较常用的有以下几个：
1. Konsole. 终端，使用内置的 Breath2 theme，同时使用字体 Source Code Pro 并开启
   无限滚动，用了这个之后我就不再用 Tmux，通过 Control-Shift-C/V 进行复制粘贴非
   常方便。当然也要对于快捷键进行一定的设置。
2. Okular. Pdf, dvi 等文件的查看器。同时备注功能较为强大，但是选择文本的交互总是
   让我感觉很难受，而且 Open in Tabs 在不同虚拟桌面中有问题。需要将以下文件放入
   desktop 文件夹中，然后用 mimeopen 将默认程序设为这个。（依赖于 wmctrl）
3. Dolphin. 文件管理器，可以选择单模式。
4. Juk. 音乐播放器，和 KDE 整合较好。
5. KOrganizer. 和 Org Agenda 配合使用，通过读取 iCalendar 文件提供日程提示。
6. Latte Dock. Mac-like Dock. 可以自动隐藏，放于桌面左侧。
#+begin_src c
[Desktop Entry]
MimeType=image/vnd.djvu;image/vnd.djvu+multipage;application/epub+zip;application/x-mobipocket-ebook;application/pdf;application/x-gzpdf;application/x-bzpdf;application/x-wwf;
Terminal=false
Name=Okular_Unique
GenericName=Document Viewer
Comment=Universal document viewer
Exec=okular-unique %U
Icon=okular
Type=Application
InitialPreference=8
Categories=Qt;KDE;Graphics;Viewer;
X-KDE-Keywords=PDF, Portable Document Format
NoDisplay=true
#+end_src
** 其他软件
:PROPERTIES:
:ID:       d3f6f9a4-9469-47a2-9e53-85d9feba7a5c
:END:
1. Firefox / Chrome. 网页浏览，必须要有的插件是广告拦截 （我用的是 uBlock origin，
   注意要开启 Filter Lists/Regions,Languages/CHN) 和 Auto Switch。
2. Goldendict. 英语词典，可以自己添加词典，我使用的是网上下载的，常用的包括 New
   Oxford English-Chinese Dictionary，牛津高阶学习词典（OALD）,牛津英语搭配词典，
   USE THE RIGHT WORD, WordNet 3.0 等。
3. Zeal. 文档查询，与 Mac 的 Dash 相似。（实际上使用的就是相同的词典）
4. Mega / Nutstore. 云盘用于同步，我用 Mega 同步较大量的文档，通过 Nutstore 同步
   一些较小的配置。
5. ZClock. 我个人编写的一个闹钟，每隔一段时间放音乐，提示你应该休息了。[[https://github.com/zenith-john/ZClock][ZClock]]
6. Thunderbird. 邮件管理。尝试过使用 Emacs 进行管理，但是弄不好多邮箱配置最后放
   弃了。
7. Emacs. 之后细讲。
8. QT Creator. 用于开发 QT Application。虽然实际上我只写了一个 ZClock。
9. fcitx, rime. rime 输入法，你值得拥有。
10. Zathura. 另一个 pdf 查看器，小巧，快速，用于与 latex 相配合。
11. Zotero 联合 Firefox 插件进行文献管理。
12. flameshot。一个有用的截屏软件。
13. psensor 一个监控 cpu 的软件。
14. fsearch Linux 下的 Everything。
** 命令行程序
1. wmctrl. 非常重要的命令行程序，通过它可以实现 RaiseOrRun 的效果，即 wmctrl
   -x -R 'class_name' || appname，其中 class name 可以通过 xprop 获得。
2. git. 版本控制不用多说了。
3. vim. 快。
4. trojan. 详见https://manateelazycat.github.io/proxy/2020/02/10/trojan.html
5. rcm. 用于管理小的配置文件，比如 .zshrc 等。可以通过 mkrc 将文件搜集到
   ~/.dotfiles，并通过 rcup 进行恢复，而收集后的文件就可以通过 git 进行管理。
6. texlive. 对于学术工作者而言非常重要。注意使用网上的脚本
   latexindent-module-installer 进行必要的安装使得 latexindent perl 脚本可用。
7. ripgrep. 快速的 grep，同时与 Emacs 等软件配合。
8. zsh. 更加好用的 shell。可以参考我的 zshell 配置，并不是非常复杂。 其中 z.lua
   使你可以快速地在文件夹间穿梭。
9. fd. 快速的 find.
10. fzf. 命令行结果选择工具，可以用于搜索历史等，非常方便。
11. ZSelectWindow. 严格来说，它并不是命令行工具，它可以实现类似 Emacs 中 Avy 的
    效果来切换窗口。不足之处是由于使用 python 编写速度不是很快。
12. xcape. 另一个非常重要的程序，通过处理 X Windows 的指令使得键盘更加好用。我添
    加的设置有将单击 Caps Lock 设置为 Escape，将单击 Alt_R 设置为 Ctrl + X，将单
    击 Shift_R 设置为 Ctrl + C，将单击 Windows 设置为快捷键然后连接到
13. pyenv. python 版本控制，非常不友好，几乎废弃。
14. nvm. node.js 版本控制。
15. you-get 用于下载视频。参考[[id:63598449-2dac-4bab-bc86-3d516447cb98][半自动化下载B站收藏夹视频]]
16. atool 通用解压工具。
17. sd https://github.com/chmln/sd sd 是 sed 的 Rust 替代品，提供了更为简单和符合直观的参数。
** Python 相关
1. black. 文件格式化程序，确保你的代码规范。
2. magic-import. 智能 import.
3. python-language-server. https://github.com/microsoft/python-language-server,
   编译指令，当然因此我也需要 dotnet
#+begin_src bash
cd python-language-server/src/LanguageServer/Impl
dotnet publish -c Release -r linux
#+end_src
** C/C++ 相关
1. cmake. C++ 构建工具。
2. ccls. C++/C language server。
3. clang. 其中 clang-tidy 用于查错，同时 clang-format 用于格式化代码。个人偏向于
   使用 microsoft 格式，但是将缩进改为 4。
* DONE Emacs
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: emacs_configuration
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :showtoc true
:END:
** 版本
Emacs 是我最常用的编码工具。我使用的是 Emacs 28 版本，自己编译，编译选项为

#+begin_src bash
./configure --with-modules --with-xwidgets --with-mailutils --with-imagemagick --with-native-comp
#+end_src
** 配置文件主体
对于新手而言，不建议自己从头开始配置。因为很有可能会迷失在配置文件之中，建议先使
用其他人的配置，同时通过学习其他人的代码来进行学习，在一定时间之后再逐渐积累形成
自己的配置。就我个人而言最开始使用的是purcell的配置文件。
https://github.com/purcell/emacs.d 又尝试了Spacemacs，
https://github.com/syl20bnr/spacemacs, 但是由于Spacemacs启动速度过慢，同时有过多
的冗余设置，加入自己的配置也不够方便，因此，开始了自己的配置。从各个repo中抄了很
多的代码，途中也学习了不少关于Emacs和Lisp的知识。最近发现了
Doom-emacs,https://github.com/hlissner/doom-emacs/。 相比于Spacemacs，Doom-emacs
启动较快，同时利用Doom-emacs提供的各种宏，能够更好地在不改变原始仓库代码的同时进
行配置。 +目前我的配置就建立在Doom-emacs的基础上+ 。目前我已经重新使用完全由自己
编码的配置来换取精确的控制。就我现在来看，我更加推荐 Purcell 的配置，并从他的配
置中逐步学习。这是因为他的配置额外的结构较少，不容易像学习 spacemacs 一样陷入配
置的重重引用中。
** 好的字体是成功的一半
推荐字体 *更纱黑体* ，中英文等宽等高避免Org-mode的各种错位。虽然个人感觉英文字体
没有那么好看，但还是可以接受的。(中文还是非常漂亮的)附链接:[[https://github.com/be5invis/Sarasa-Gothic][Sarasa Gothic]]

可以这样配置（中文使用更纱黑体，英文使用 Iosevka 与 Source Code Pro 的混合）：
#+begin_src emacs-lisp
(defvar zenith-font (font-spec :family "Iosevka Term SS09" :size 16 :weight 'semi-bold))
(defvar zenith-unicode-font (font-spec :family "Sarasa Term SC" :weight 'bold))
(setq inhibit-x-resources t)

(defun zenith/init-font ()
  (add-to-list 'default-frame-alist `(font . ,(font-xlfd-name zenith-font)))
  (set-fontset-font t 'unicode zenith-unicode-font nil 'prepend))

(zenith/init-font)
#+end_src
在GTK环境中，EMACS在打开后会根据GConf重新设置字体格式，因此要有效的设置字体必须在.emacs或者init.el中加入
#+BEGIN_SRC emacs-lisp
(define-key special-event-map [config-changed-event] 'ignore)
#+END_SRC
更具体的说明请看https://emacs.stackexchange.com/questions/32641/something-changes-the-default-face-in-my-emacs/32664#32664
** Writeroom-mode and others
至少在Ubuntu 18.04中，这些使文字居中的模式(Writeroom )不能够很好地与ibus协作，
ibus的选单会发生偏移。原因和解决方案有待进一步观察。（目前我已经使用
darkroom-mode 但是会遇到同样的问题）

事实上，这个问题可以使用 Emacs 的内置输入法来解决。但是内置输入法太弱，因此我们
使用 https://github.com/tumashu/pyim 。事实上，pyim 除了输入法外还提供了很多非常
有用的功能。比如根据环境切换中英文状态，比如将英文字符串转变为输入法的输入等。配
置可以参考我的 config/init-pyim.el 。其中我使用的 pyim 后端是 rime， rime 是一个
非常好用的输入法。
** 在Emacs中使用使用Microsoft Python Language Server
*** Why
目前来看 Microsoft 的 Python Language Server 由于使用 C# 写成，因此速度最快，卡顿较少，补全效果较好。
*** How
主要的过程都在这篇文章之中：https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/ ,但是有必要对于一些步骤进行改进。

首先在代码中对于 lsp-ui-sideline--format-info 和 lsp-ui-doc--extract 这两个函数添加了 advice，而这advice在输入的 doc 为 nil 时会报错，因此在ccls时这两个函数不能够正常工作，因此需要添加 (when doc ……) 这样的判定条件才能够保证其正确性。
另一方面，在我的电脑上，python language server 在补全时会加入一些莫名其妙的东西。在字符较短时，会列出所有的关键字(不知道为什么)。因此需要修改 company-transformers 为了保证模糊匹配的效果，加入了 company-flx-transformer 来对所获得的序列进行排序。效果尚可。
*** 补充
+由于目前emacs的lsp-mode速度较慢，因此我在使用Doom-emacs并没有开启lsp选项+ 。 目前
我使用的是 nox 是 eglot 的阉割版，自动支持 mspyls。
** Org-mode
*** 一些有用的功能
首先就是 [[https://github.com/sabof/org-bullets][org-bullets]]
还有就是为了配合 ivy 等补全工具设置
#+begin_src emacs-lisp
(setq org-outline-path-complete-in-steps nil
      org-goto-interface 'outline-path-completion)
#+end_src
放大 latex preview 的公式，并让公式背景与主体适应：
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
(setq-default
 org-format-latex-options
 (plist-put org-format-latex-options
            :background
            (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                'default)
                            :background nil t)))
#+end_src
在字体使用粗体时，emphasis 的效果加粗无法很好的显示出来。因此我通过配置
org-emphasis-alist改变了原来应该加粗的字体的颜色，并使得能够这一效果可以换行。代码如下：
#+begin_src emacs-lisp
(add-to-list 'org-emphasis-alist
             '("*" (:foreground "pink")))
(setcar (nthcdr 4 org-emphasis-regexp-components) 4)
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+end_src
还有很多细碎的小配置就不赘述了。

*** Org mode Easy Templates
在 Org-mode 9.2 中，easytemplate的使用方式发生了改变。从 ~<s <TAB>~ ;变成了 ~C-c C-,~ 。
不得不说 Org-babel 是个很好用的功能，可以探索一下。
*** org-refile
由于我个人倾向于将笔记放在一起，因此使用了一个笔记本文件夹，为了使得 refile 能够
与此配合需要一些配置。
#+begin_src emacs-lisp
(defun zenith/refile-targets-notes ()
  (directory-files zenith/note-directory t ".*\\.org\\'"))

(setq-default org-refile-targets
              '((nil :maxlevel 3)
                (org-agenda-files :maxlevel 3)
                (zenith/refile-targets-notes :maxlevel 3)))
#+end_src
*** GTD
Emacs Org-mode 的一个卖点就是 GTD。其中需要 org-agenda, org-capture, org-tags 等
部分互相配合。关于关键词可以参考，在 Tag 中创建了一个 Group Must 来管理不得不做
的一些事的 Tag：
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w@/!)" "PAUSE(p)" "SOMEDAY(s)" "NEXT(n)" "|" "DONE(d!)" "CANCELLED(c@)")
        (sequence "[ ](T)" "[-](P)" "[?](m)" "|" "[X](D)"))
      org-todo-keyword-faces
      '(("[-]" :inherit (font-lock-constant-face bold))
        ("[?]" :inherit (warning bold))
        ("WAITING" :inherit bold)
        ("LATER" :inherit (warning bold))))

(setq org-capture-templates
      '(
        ("h" "Homework" entry (file+headline "~/Dropbox/task.org"  "Homework")
         "* TODO %? :Homework:\n")
        ("s" "Schedule" entry (file+headline "~/Dropbox/task.org" "Schedule")
         "* %?\n")
        ("r" "Project" entry (file+headline "~/Dropbox/task.org" "Project")
         "* TODO %?\n")
        ("q" "Question" entry (file+headline "~/Dropbox/task.org" "Question")
         "* TODO %? :Question:\n")
        ("d" "Idea" entry (file+headline "~/Dropbox/task.org" "Idea")
         "* TODO %? :Idea:\n")))

;; Org tag
(setq org-tag-alist
      '(("Improvement" . ?i)
        (:startgrouptag)
        ("Must")
        (:grouptags)
        ("Homework" . ?h)
        ("Job" . ?j)
        (:endgrouptag)
        ("Personal" . ?p)
        ("Question" . ?q)
        ("Idea" . ?d)))
#+end_src

关于 Agenda 可以参考，在代码中创建了一个 "b" 视图，并且将紧急的事情，最近的
Deadline 较遥远的 Deadline 等整合到了一起。
#+begin_src emacs-lisp
;; Org agenda settings
(setq org-agenda-start-on-weekday nil
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled)
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-span 7
      org-agenda-compact-blocks t
      org-agenda-show-all-dates nil
      org-deadline-warning-days 365
      org-agenda-show-future-repeats t
      org-agenda-window-setup 'only-window)


(setq org-agenda-custom-commands
      '(("b" "Agenda View" ((tags "AGENDAHEADER"
                                  ((org-agenda-overriding-header "Today's Schedule:")))
                            (agenda ""
                                    ((org-agenda-show-all-dates t)
                                     (org-agenda-span 'day)
                                     (org-deadline-warning-days 0)
                                     (org-agenda-start-day "+0d")))
                            (todo "NEXT"
                                  ((org-agenda-overriding-header "========================================\nNext Tasks:")))
                            (tags-todo "Must/!-NEXT"
                                       ((org-agenda-overriding-header "========================================\nMust Do:")))
                            (tags "BEFOREWEEKGLANCE"
                                  ((org-agenda-overriding-header "========================================\nNext Week Glance:")))
                            (agenda ""
                                    ((org-agenda-show-all-dates t)
                                     (org-agenda-span 6)
                                     (org-agenda-start-day "+1d")))
                            (tags "BEFOREDEADLINE"
                                  ((org-agenda-overriding-header "========================================\nFar Away Tasks:")))
                            (agenda ""
                                    ((org-agenda-span 180)
                                     (org-agenda-time-grid nil)
                                     (org-agenda-show-all-dates nil)
                                     (org-agenda-entry-types '(:deadline :scheduled))
                                     (org-agenda-start-day "+7d")))))
        ("i" "Improvement" ((tags-todo "Question"
                                       ((org-agenda-overriding-header "Unsolved Questions:")))
                            (tags-todo "Improvement" ((org-agenda-overriding-header "\n\nImprovment:")))
                            (tags-todo "Idea+TODO<>\"NEXT\"|Personal+TODO<>\"NEXT\""
                                       ((org-agenda-overriding-header "\n\nPersonal Project:")))))))


#+end_src
*** GTD 补充
由于 Org-mode 本身并不带有更加可视化的视图以及提醒系统，我个人通过 org-icalendar
和 KOrganizer 来做到这一点。确切来说，在使用 Org-agenda 时会将目前的配置导出到
icalendar 文件中，然后再使用 KOrganizer 读取来达到目的。
#+begin_src emacs-lisp
;; ox-icalendar
(with-eval-after-load 'ox-icalendar
  (setq org-icalendar-combined-agenda-file (expand-file-name "~/Dropbox/agenda.ics")
        org-icalendar-include-todo t
        org-icalendar-use-deadline '(event-if-not-todo todo-due)
        org-icalendar-use-scheduled '(event-if-not-todo todo-start)
        org-icalendar-alarm-time 15
        org-icalendar-store-UID t
        org-agenda-default-appointment-duration 90))
(add-hook 'org-agenda-finalize-hook 'org-icalendar-combine-agenda-files)
#+end_src
*** Org-attach
attach 是将文件附与某个 headline 的方法，这样可以在 Org-mode 中将标题和文件关联
起来，可以看成是另一种 Link. 我定义了一个方法，这个方法可以在 org-agenda 中更快
地打开 attach 的文件，这也是它相对于一般的 Link 的优势所在。
#+begin_src emacs-lisp
;; Org attach
(setq org-attach-method 'lns)

(zenith/autoload '(org-attach org-attach-open) "org-attach")

(defun org-agenda-attach-open ()
  "Open attachment with one-key stroke."
  (interactive)
  (unless (eq major-mode 'org-agenda-mode)
    (let ((debug-on-quit nil))
      (signal 'quit '("This was written expressly for `*Org Agenda*`."))))
  (let ((marker (or (get-text-property (point) 'org-hd-marker)
                    (get-text-property (point) 'org-marker))))
    (if marker
        (save-excursion
          (set-buffer (marker-buffer marker))
          (goto-char marker)
          (org-back-to-heading t)
          (call-interactively 'org-attach-open))
      (error "No task in current line"))))
#+end_src
*** Org-id
一般的 Org-mode 之间的 Link 是依赖于文件结构的。这样当文件结构变化时其链接有可能
会失效，因此 Org-Mode 提供了 Org-id 这一模块来实现更加健壮的链接。
#+begin_src emacs-lisp
(setq org-id-track-globally t
      org-id-link-to-org-use-id t
      org-id-locations-file (expand-file-name ".org-id-locations" zenith-emacs-local-dir))

(with-eval-after-load 'org-id
  (setq org-id-extra-files (directory-files-recursively zenith/note-directory ".*\\.org"))
  (org-id-update-id-locations)
  (defun org-id-complete-link (&optional arg)
    "Create an id: link using completion"
    (concat "id:"
            (org-id-get-with-outline-path-completion org-refile-targets)))
  (org-link-set-parameters "id"
                           :complete 'org-id-complete-link)
  (defun zenith/search-id-reverse-link ()
    "Search the id in the directory"
    (interactive)
    (let ((query
           (cdr (first (org-entry-properties nil "ID")))))
      (rg-project query "*.org")))
  (defun zenith/org-insert-link-by-id ()
    "Insert the link by id"
    (interactive)
    (let ((link (org-link--try-special-completion "id")))
      (org-insert-link nil link))))
#+end_src
*** Org 与 LaTeX
Org 有着非常丰富的导出选项，比如导出到 PDF，这一功能通过 LaTeX 实现。因此需要对
于 ox-latex 进行一定的配置。
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("myart"
                 "\\documentclass{article}
[DEFAULT-PACKAGES]
[PACKAGES]
\\usepackage[backend=biber,style=alphabetic]{biblatex}
\\addbibresource[location=local]{~/Dropbox/Library.bib}
\\setCJKmainfont{Source Han Sans CN}
\\setmonofont{Source Code Pro}
\\gappto{\\UrlBreaks}{\\UrlOrds}
"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-compiler "xelatex"
        org-latex-default-class "myart"
        org-export-with-sub-superscripts nil
        org-latex-listings 'minted
        org-latex-minted-options '(("breaklines" "true")
                                   ("frame" "single")
                                   ("breakanywhere" "true"))
        org-latex-pdf-process
        '("latexmk -g -pdf -pdflatex=\"%latex\" -shell-escape -outdir=%o %f"))
  (setq org-latex-packages-alist '(("" "minted")
                                   ("" "xcolor")
                                   ("" "xeCJK")
                                   ("" "fontspec")
                                   ("" "etoolbox"))))
#+end_src
*** org-download in WSL
由于一些 Windows 下所必须的软件，我有很多时候是在 WSL 中使用 Emacs，为了更好地在 WSL 中使用 org-download 我进行了一些必要的 Trick。首先要在 Windows 中安装 [[https://www.irfanview.com/][IrfanView]]。然后需要使用我的 init-wsl.el 文件，其中包含了对文件路径进行一定的处理的函数。最后，再修改一下 org-download-yank 以及 org-download-screenshot 函数即可。当然，最好用的 drag-and-drop 还是无法使用的。
** Emacs换行问题
关闭 auto-fill-mode，使用 visual-line-mode，因为visual-line-mode在操作hjkl时更加直观。
#+begin_src emacs-lisp
(remove-hook! org-mode
              #'auto-fill-mode)
(global-visual-line-mode)
#+end_src

现在我同时使用 auto-fill 和 visual-fill-column。事实上 auto-fill-mode 有很多的优
点，在自己编辑时会感觉更加舒服，但是问题在于 auto-fill 后的文件给别人就会不舒服。
这是 visual-fill-column 就派上了用场。
#+begin_src emacs-lisp
(defun zenith/fill-and-indent-region ()
  "Fill paragraph and indent region at once"
  (interactive)
  (when (or
         (derived-mode-p 'text-mode)
         (nth 4 (syntax-ppss))
         (nth 8 (syntax-ppss)))
    (call-interactively 'fill-paragraph))
  (call-interactively 'indent-region))

;; visual fill column
(autoload 'visual-fill-column-mode "visual-fill-column" "" t)
(setq-default visual-fill-column-width (+ fill-column 20))
(add-hook 'visual-line-mode-hook 'visual-fill-column-mode)
(add-hook 'auto-fill-mode-hook 'visual-line-mode)
#+end_src
** 关于注释问题
Doom-emacs默认的注释插件是evil-commentary，但是我觉得evil-nerd-commenter https://github.com/redguardtoo/evil-nerd-commenter 更加便于使用，因为它能够toggle，注释和非注释状态。因此我使用evil-nerd-commenter取代了evil-commentary。
#+begin_src emacs-lisp
;; evil-nerd-commenter
;; dependencies: evil
(zenith/autoload
 '(evilnc-comment-operator
   evilnc-comment-or-uncomment-lines
   evilnc-comment-or-uncomment-paragraphs
   evilnc-comment-or-uncomment-to-the-line
   evilnc-copy-and-comment-lines
   evilnc-copy-and-comment-operator
   evilnc-copy-to-line)
 "evil-nerd-commenter")
#+end_src
其中 zenith/autoload 是我自己写的一个函数是 autoload 的一个封装，可以同时对多个
函数进行 autoload。
** Evil-mode
由于我已经使用了个人的配置，就不得不对于 Evil-mode 来进行一番配置了，事实上使用
evil-collection 后基本上就按着默认来了。值得注意的是
https://github.com/emacs-evil/evil-surround 和
https://github.com/redguardtoo/evil-matchit 两个包，非常好用值得一试。
#+begin_src emacs-lisp
;; evil
;; dependencies: undo-tree goto-chg
(setq evil-want-integration t  ; This is optional since it's already set to t by default.
      evil-want-keybinding nil ; loading keybindings
      evil-disable-insert-state-bindings t ; Use emacs's binding in insert state
      evil-want-C-d-scroll nil ; Use emacs's C-d
      evil-want-C-u-scroll nil ; Use emacs's C-u
      evil-want-C-i-jump t     ; Use vim's C-i
      evil-want-fine-undo t    ; Don not aggregate changes when exiting insert state
      evil-want-C-w-delete t   ; Use emacs's C-w
      evil-toggle-key ""       ; C-z not entering emacs state
      )

(require 'evil)

(evil-mode 1)
#+end_src
** 自动保存
Emacs 的保存非常反人类，不如让他自己来保存吧。不过这个功能最好和版本控制系统一起
使用，否则后果自负。这里调用了 evil 的 api， 每 2 秒没有操作就保存一次。
#+begin_src emacs-lisp
;; The code is adjusted from https://github.com/manateelazycat/auto-save. The
;; problem of the original code is that it calls buffer-modified-p which makes
;; ws-butler unhappy.
(setq auto-save-idle 2)

(defun zenith/auto-save-buffers ()
  (interactive)
  (when (and
         (not (minibufferp))
         (or (not (boundp 'yas--active-snippets))
             (not yas--active-snippets))
         (or (not (boundp 'company-candidates))
             (not company-candidates)))
    (with-temp-message ""
      (let ((inhibit-message t))
        (evil-write-all nil)))))

(defun zenith/auto-save-enable ()
  (interactive)
  (run-with-idle-timer auto-save-idle t #'zenith/auto-save-buffers))

(zenith/auto-save-enable)
#+end_src
** LaTeX
Ebib 是 bib 文件的查看器，但是我感觉用处并没有很大，很多时候我都是直接编辑的。

Auctex + reftex 是非常强大的 LaTeX 处理器，其中的功能非常强大而复杂。这里的代码
使得 Reftex 能够更好地在写数学论文时进行引用。
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
;; Get ReTeX working with biblatex
;; http://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992
(setq reftex-cite-format
      '((?a . "\\autocite[]{%l}")
        (?b . "\\blockcquote[]{%l}{}")
        (?c . "\\cite[]{%l}")
        (?f . "\\footcite[]{%l}")
        (?n . "\\nocite{%l}")
        (?p . "\\parencite[]{%l}")
        (?s . "\\smartcite[]{%l}")
        (?t . "\\textcite[]{%l}"))
      reftex-plug-into-AUCTeX t
      reftex-toc-split-windows-fraction 0.3
      reftex-bibpath-environment-variables '("/home/zenith-john/Dropbox/")
      reftex-bibliography-commands '("bibliography" "nobibiliography" "addbibresource")
      reftex-label-alist
      '(("theorem" ?m "thm:" "~\\ref{%s}" nil (regexp "[Tt]heorem" "[Tt]h\\.") -3)
        ("lemma"   ?m "lem:" "~\\ref{%s}" nil (regexp "[Ll]emma"   "[Ll]m\\.") -3)
        ("proposition" ?m "prop:" "~\\ref{%s}" nil (regexp "[Pp]roposition" "[Pp]rop\\.") -3)
        ("remark"      ?m "rmk:"  "~\\ref{%s}" nil (regexp "[Rr]emark" "[Rr]mk\\.") -3)
        ("definition"  ?m "def:"  "~\\ref{%s}" nil (regexp "[Dd]efinition" "[Dd]ef\\.") -3)
        ("corollary"   ?m "cor:"  "~\\ref{%s}" nil (regexp "[Cc]orollary" "[Cc]or\\.") -3))
      reftex-ref-macro-prompt nil)
#+end_src
这里设置了自动补全的后端，注意顺序在这里是重要的。
#+begin_src emacs-lisp
(with-eval-after-load 'tex
  ;; the order of company-backend is important.
  ;; company-auctex
  ;; dependencies: yasnippet company auctex
  (require 'company-auctex)
  ;; company-math
  ;; dependencies: company math-symbol-lists
  (require 'company-math)

  (add-to-list '+latex-company-backends 'company-auctex-labels)
  (add-to-list '+latex-company-backends 'company-math-symbols-latex)
  (add-to-list '+latex-company-backends '(company-auctex-macros company-auctex-environments)))

(defun zenith/latex-company-setup ()
  "Setup company backends for latex editing."
  (make-local-variable 'company-backends)
  (setq zenith/local-company-backends nil)
  (dolist (backend +latex-company-backends)
    (add-to-list 'company-backends backend)))

(add-hook 'LaTeX-mode-hook 'zenith/latex-company-setup)
#+end_src
在 auctex 中比较重要的设置是 TeX-source-correlate-mode，
LaTeX-fill-break-at-separators 以及 TeX-command-extra-options，详情可以参考我的
配置 config/init-latex.el 。值得注意的是其中我的几个函数，
#+begin_src emacs-lisp
(defun LaTeX-star-environment-dwim ()
  "Convert between the starred and the not starred version of the current environment."
  (interactive)
  ;; If the current environment is starred.
  (if (string-match "\*$" (LaTeX-current-environment))
      ;; Remove the star from the current environment.
      (LaTeX-modify-environment (substring (LaTeX-current-environment) 0 -1))
    ;; Else add a star to the current environment.
    (LaTeX-modify-environment (concat (LaTeX-current-environment) "*"))))

(defun zenith/latex-toggle-section-with-star ()
  (interactive)
  (if (member '("section" 2) LaTeX-section-list) ;; TODO: Make it more robust.
      (setq LaTeX-section-list
            '(("part" 0)
              ("chapter" 1)
              ("section*" 2)
              ("subsection*" 3)
              ("subsubsection*" 4)
              ("paragraph" 5)
              ("subparagraph" 6)
              ("section" 2)
              ("subsection" 3)
              ("subsubsection" 4)))
    (setq LaTeX-section-list
          '(("part" 0)
            ("chapter" 1)
            ("section" 2)
            ("subsection" 3)
            ("subsubsection" 4)
            ("paragraph" 5)
            ("subparagraph" 6)))))
(defvar zenith/equation-env-list
  '(("\\begin{equation}\n" . "\n\\end{equation}")
    ("\\[" . "\\]")
    ("\\(" . "\\)"))
  "The pairs of equation environment")

(defun zenith/regex-or (l)
  (let ((regex "\\(?:")
        (first-one t))
    (dolist (e l)
      (if (not first-one)
          (setq regex
                (concat regex "\\\|"))
        (setq first-one nil))
      (setq regex
            (concat regex (regexp-quote e))))
    (concat regex "\\)")))

(defun zenith/equation-match (beg end)
  "Check whether `beg' and `end' matches as equation"
  (let ((beg-string (buffer-substring-no-properties beg (min (+ beg 20) (point-max))))
        (end-string (buffer-substring-no-properties (max (point-min) (- end 20)) end))
        ret)
    (dolist (e zenith/equation-env-list)
      (when (and
             (string-prefix-p (car e) beg-string)
             (string-suffix-p (cdr e) end-string))
        (setq ret e)))
    ret))

(defun zenith/cycle-equation ()
  (interactive)
  (if-let* ((regex (zenith/regex-or (append (mapcar 'car zenith/equation-env-list)
                                            (mapcar 'cdr zenith/equation-env-list))))
            (beg (save-excursion (re-search-backward regex nil t)))
            (end (save-excursion (re-search-forward regex nil t)))
            (kind (zenith/equation-match beg end))
            (len (safe-length zenith/equation-env-list))
            (pos (cl-position kind zenith/equation-env-list))
            (next (nth (if (= pos (- len 1))
                           0
                         (+ pos 1)) zenith/equation-env-list)))
      (progn
        (save-excursion
          (goto-char beg)
          (delete-char (length (car kind)))
          (insert (car next))
          (re-search-forward (zenith/regex-or (mapcar
                                               'cdr zenith/equation-env-list)))
          (delete-backward-char (length (cdr kind)))
          (insert (cdr next))))
    (message "No match equation environment found.")))
#+end_src
其中 LaTeX-star-environment-dwim 可以为 environment 加上星号，
zenith/latex-toggle-section-with-star 可以使得插入的 section 带上星号。而
zenith/cycle-equation 可以使得公式在三种状态下切换。
** 版本控制
Magit 是我见过的最好用的 git 前端，是我离不开 Emacs 的重要理由。同时 Emacs 还有
两个插件 https://github.com/syohex/emacs-git-gutter 和
https://github.com/emacsmirror/git-timemachine 来进一步强化 Emacs 和 Git 之间的
协作。
** UI
我使用了 https://github.com/seagle0128/doom-modeline ，总体而言还是非常好用的，
但是必须进行一定的 tweak 否则和 Org-mode 之间会有一定的冲突
#+begin_src emacs-lisp
;; Redefine `doom-modeline-redisplay' to ignore `doom-modeline--size-hacked-p'
;; to fix the problem caused by reuse of some buffer, for example *Org Tags*
(defun zenith/doom-modeline-always-redisplay ()
  "Check whether this buffer should always display"
  (or (string-equal (buffer-name) " *Org tags*")
      (string-equal (buffer-name) " *Org todo*")))
(defun doom-modeline-redisplay (&rest _)
  "Call `redisplay' to trigger mode-line height calculations.

Certain functions, including e.g. `fit-window-to-buffer', base
their size calculations on values which are incorrect if the
mode-line has a height different from that of the `default' face
and certain other calculations have not yet taken place for the
window in question.

These calculations can be triggered by calling `redisplay'
explicitly at the appropriate time and this functions purpose
is to make it easier to do so.

This function is like `redisplay' with non-nil FORCE argument.
It accepts an arbitrary number of arguments making it suitable
as a `:before' advice for any function.  If the current buffer
has no mode-line or this function has already been called in it,
then this function does nothing."
  (when (and (bound-and-true-p doom-modeline-mode)
             mode-line-format
             (not doom-modeline--size-hacked-p))
    (redisplay t)
    (unless (zenith/doom-modeline-always-redisplay)
      (setq doom-modeline--size-hacked-p t))))
#+end_src

除此之外，我对于 hl-line-mode 也进行了一定的定制。由于某些主体 highlight 的颜色
和 Mark 的颜色较为相似，造成分辨上的困难，我通过重定义使得在选择文本时关闭
hl-line-highlight。
#+begin_src emacs-lisp
;; Redefine `hl-line-highlight' to disable highlight line when selection is
;; active.
(defun hl-line-highlight ()
  "Activate the Hl-Line overlay on the current line."
  (if
      (and hl-line-mode	; Might be changed outside the mode function.
           (not (region-active-p)))
      (progn
        (unless hl-line-overlay
          (setq hl-line-overlay (hl-line-make-overlay))) ; To be moved.
        (overlay-put hl-line-overlay
                     'window (unless hl-line-sticky-flag (selected-window)))
	(hl-line-move hl-line-overlay))
    (hl-line-unhighlight)))
#+end_src
** 自动补全
自动补全使用的是 https://github.com/company-mode/company-mode 和
https://github.com/sebastiencs/company-box 。其中的配置可以参考
config/init-company.el 。事实上，在其中我自己实现了一个 company 的模糊匹配但是效
果不让人满意。

另一部分的自动补全是所谓的模板，模板使用的是
https://github.com/joaotavora/yasnippet。 同时我自己编写了一个插件实现模板的自动
展开，其要求是前一个单词以 , 开始然后按下空格键。函数会尝试展开，如果展开失败，
那么原封不动，如果展开成功，逗号就会消失。
#+begin_src emacs-lisp
;; Make yasnippet expandsion easy for me.
(defvar zenith/snippet-prefix ?,
  "The first character of expanding yasnippet")

(defun zenith/may-expand ()
  "Auto expand if the word before the point are started with
`zenith/snippet-prefix'. Return `t' if the expansion is successful
and `nil' otherwise."
  (interactive)
  (let* ((word-end (point))
         (word-start (save-excursion
                       (save-restriction
                         (narrow-to-region (line-beginning-position 0) (line-end-position))
                         (search-backward-regexp "^\\|[[:blank:]]\\|(\\|)\\|\\[\\|]\\|{\\|}" nil t))))
         (word)
         (len))

    (when word-start
      (if (eq (char-after word-start) zenith/snippet-prefix)
          (setq word (buffer-substring-no-properties word-start word-end))
        (setq
         word-start (+ word-start 1)
         word (buffer-substring-no-properties word-start word-end)))
      (when (eq zenith/snippet-prefix (string-to-char word))
        (delete-region word-start (+ word-start 1))
        (if (call-interactively 'yas-expand)
            t
          (setq len (- (length word) 1))
          (backward-char len)
          (insert-char zenith/snippet-prefix)
          (forward-char len)
          nil)))))

(defun zenith/post-command-hook ()
  "Check whether or not to expand after insertion of ~SPC~."
  (interactive)
  (when
      (and
       yas-minor-mode
       (eq last-command 'self-insert-command)
       (eq (char-before) ?\s))
    (delete-backward-char 1)
    (unless (zenith/may-expand)
      (insert-char ?\s)
      (when (boundp company-mode)
        (company-abort)))))

(define-minor-mode auto-expand-mode
  "Minor mode for zenith/may-expand"
  nil nil nil
  (if auto-expand-mode
      ;; Priority of the function should be high enough to run before fill
      ;; column
      (add-hook 'post-command-hook 'zenith/post-command-hook 0 t)
    (remove-hook 'post-command-hook 'zenith/post-command-hook t)))
(define-globalized-minor-mode global-auto-expand-mode auto-expand-mode auto-expand-mode-on)

(defun auto-expand-mode-on ()
  (auto-expand-mode 1))

(global-auto-expand-mode 1)
#+end_src
** Ivy-mode
https://github.com/abo-abo/swiper ivy, swiper, counsel 是强大的工具是对于 ido 的
加强。https://github.com/DarwinAwardWinner/amx 进一步加强了 execute-command。值
得提到的有两点，一是
#+begin_src emacs-lisp
(defun zenith/open-by-external-program (path)
  "Open file in external program"
  (let ((display-buffer-alist '(("*Async Shell Command*" . (display-buffer-no-window)))))
    (async-shell-command (format "nohup xdg-open \"%s\" >/dev/null 2>&1"
                                 (file-relative-name path default-directory)))))
#+end_src
这里个函数在 Linux 中通过系统默认的程序来打开文件。二是
#+begin_src emacs-lisp
;; https://github.com/tumashu/emacs-helper/commit/1932a9e8a64f08bb9603cf244df41f6c0bbc3dac
;; Search chinese with pinyin
(defun zenith/ivy-cregexp-helper (str)
  (cons (pyim-cregexp-build str) t))

(defun zenith/ivy-cregexp-ignore-order (str)
  (let ((str-list (split-string str)))
    (if str-list
      (mapcar 'zenith/ivy-cregexp-helper (split-string str))
      "")))

(setq ivy-re-builders-alist '((counsel-company . ivy--regex-fuzzy)
                              (t . zenith/ivy-cregexp-ignore-order)))

#+end_src
这样就可以在 ivy 的补全中直接使用拼音搜索，非常的好用。（事实上，在 ivy-posframe
中，pyim 莫名地不可用）
** Programming
编码主要依赖于https://github.com/flycheck/flycheck, 用于进行代码的事实检查。
https://github.com/manateelazycat/nox 用于和 LSP Server 通信提供补全跳转等编码体
验，https://github.com/lassik/emacs-format-all-the-code 提供代码格式化。同时
https://github.com/bbatsov/projectile 提供了项目管理（事实上这一功能我用的比较少）。
** 琐碎
show-paren-mode 可以显示配对的括号。recentf 提供访问最近文件的方法。cua-mode 使
得 C-x, C-c, C-v 有和其他软件类似的行为。display-line-number-mode 是高效的显示行
号的方法。 winner-mode 提供对于 window 操作的撤销和重做。undo-tree 提供了非常好
的撤销， https://github.com/Fuco1/smartparens 提供括号和命令的补全。
https://github.com/lewang/ws-butler 以一种友好的方式去除行末空格。
https://github.com/abo-abo/ace-window 提供窗口切换的好方法。rg 提供快速的文本搜
索，和 wgrep 配合提供文本的替换。https://github.com/raxod502/ctrlf 增强了 Emacs
自带的搜索，使得行为更加可控。https://github.com/redguardtoo/wucuo 提供了快速的
拼写检查。 shackle 提供了对于弹出窗口的控制。
https://github.com/noctuid/general.el 提供了绑定快捷键的好方法。
https://github.com/justbur/emacs-which-key 提供了探索快捷键的方法。除此之外，我
还自己写了几个函数。
#+begin_src emacs-lisp
;; Delete word in a more user friendly way
(defun zenith/aggressive-delete-space ()
  "Remove all the space until non-space character."
  (interactive)
  (let ((end (point))
        (begin (save-excursion
                 (re-search-backward "[^ \t\n\r]" nil t))))
    (delete-region (+ 1 begin) end)))

(defun zenith/delete-word-or-space ()
  "Remove all the space until non-space character if the char at
point and before are all space characters and delete word
otherwise."
  (interactive)
  (if (and (zenith/is-space (char-before))
           (zenith/is-space (char-before (- (point) 1))))
      (zenith/aggressive-delete-space)
    (backward-kill-word 1)))
#+end_src
zenith/aggressive-delete-space 使得删除词的行为更精细。
#+begin_src emacs-lisp
;; jump in my way
(defvar zenith/jump-function-alist
  '((org-mode . org-goto)
    (latex-mode . reftex-toc)
    (org-agenda-mode . org-agenda-redo)
    (t . counsel-imenu))
  "The function to call when jump")

(defun zenith/jump ()
  "Jump as `zenith/jump-function-alist' like."
  (interactive)
  (if-let ((func (alist-get major-mode zenith/jump-function-alist)))
      (funcall func)
    (funcall (alist-get t zenith/jump-function-alist))))
#+end_src
zenith/jump 提供了浏览文件的统一方法。

* DONE Ubuntu 安装后
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: Ubuntu
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :showtoc true
:END:
** 软件包安装
安装 git, zsh, rust, find-fd, ripgrep, cmake, make, autoconf 等软件, 编译 emacs-28 --with-modules --with-native-comp, 在此过程中需要添加大量的包,包括 jansson, jpeg, png, tiff, xpm, gnutls, gtk3,libvterm, libtool 等, 还需要安装 rcm

#+begin_src bash
apt install git rcm zsh lua5.3 fd-find ripgrep cmake autoconf libjansson4 libjansson-dev libjpeg-dev libpng-dev libtiff5 libtiff5-dev libgtk-3-0 libgtk-3-dev libvterm0 libvterm-dev libtool libxpm4 libxpm-dev libgnutls28-dev libgif7 libgif-dev  libncurses-dev texinfo clang libclang-dev  librime librime-dev libgccjit0 libgccgit-10-dev

apt install zathura

# git clone 最好在代理配置后进行
git clone https://github.com/zplug/zplug .zplug

git clone git@github.com:zenith-john/dotfiles.git .dotfiles
rcup
git clone git@github.com:zenith-john/Notes.git
git clone git@github.com:zenith-john/zenith-emacs.git
ln -s zenith-emacs .emacs.d

git clone https://github.com/emacs-mirror/emacs --depth=1
#+end_src
在安装完 zsh 后，使用 chsh 命令将 login shell 转化为 zshell。

在 .emacs.d 的 README.md 中可以看到具体的 emacs 配置的安装方法。

Trojan 需要版本 1.14 否则可能有一些问题。（Trojan 已经无法使用了。）

安装 rust
#+begin_src bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+end_src
然后可以使用 rust 安装 sd。

#+begin_src bash
cargo install sd
#+end_src
** 安装一些应用软件
- [[https://www.zotero.org/][Zotero]]
- [[https://joplinapp.org][Joplin]]
- [[https://www.jianguoyun.com/][坚果云]]


安装 jumpapp
#+begin_src bash
git clone https://github.com/mkropat/jumpapp.git
cd jumpapp
make && sudo make install
#+end_src

#+begin_src bash
apt install flameshot juk goldendict latte-dock fsearch xbindkeys fcitx5 fcitx5-rime rofi
#+end_src
将 rime 配置文件，放入 ~/.local/share/fcitx5/rime/

为了使用 mu4e 必须编译安装 [[https://www.djcbsoftware.nl/code/mu/][mu]]，这一过程也比较复杂，请按照需求安装软件包，并完成编译。
** 杂项
1. KDE 的快捷键设置和虚拟桌面。将 .local/bin/zstart 加入启动项。将 CapsLock 换为 Ctrl。
2. 修改 /etc/fstab 来进行自动挂载 windows 的几个磁盘，以下是案例。
   #+begin_src conf
/dev/nvme0n1p3	/media/C	ntfs	defaults	0	1
   #+end_src
3. 加入 okular-unique 这一 script 来弥补 okular open in tab 的不足，然后使用 mimeopen -d 来切换默认的打开程序为 okular-unique
   #+begin_src bash
#!/bin/sh
jumpapp okular
okular $1
   #+end_src
** clang 找不到标准库头文件错误
由于 clang 会找 gcc，g++ 版本最高的 headers，因此有时 clang 会找不到头文件，因此需要安装新版本的 gcc。
** Sshfs
Example: bash
#+begin_src
sshfs -o follow_symlinks,idmap=user zhangnt20@101.6.120.15:/home/zhangnt20 -p 5003 ~/remote_home
#+end_src
** Webcal
将 webcal:// 换为 http:// 直接使用 wget 下载为 ics， 然后使用 ics2org.awk 脚本处理。
** 使用 Gnome
:PROPERTIES:
:ID:       f3aaddee-edab-4ce8-9ecc-05117c66b8a1
:END:
#+begin_src sh
apt install vanilla-gnome-desktop gnome-tweak-tools
#+end_src
由于我使用的部分软件需要 X，因此，我还是在 Xorg 中使用 Gnome。可以使用 firefox 的 app 来安装 appindicator， dash-to-dock， clipboard 三个 extensions。也需要和 KDE 一样对虚拟桌面和快捷键进行设置。

切换到 Gnome 的主要原因是 KDE 的 notfiy-send 的 notification 无法存留在 nofication center 中，而 gnome 可以。不知道是特性还是功能的问题。由于我使用 org-mode 管理日程，因此这个提醒对我来说还是比较重要的，因此我切换到了 gnome 中。

我们可以使用 kvantum 来对 QT 的应用进行 appearance 的修饰使得和 gtk 的应用更相似。
#+begin_src sh
sudo apt install qt5-style-kvantum qt5-style-kvantum-themes
echo "export QT_STYLE_OVERRIDE=kvantum" >> ~/.profile
#+end_src

可以使用以下的命令，禁用 Win 的 activity 效果
#+begin_src sh
gsettings set org.gnome.mutter overlay-key ""
#+end_src

在 Gnome 使用过程中，发现 xbindkeys 的部分快捷键不能正确作用。我们使用
#+begin_src sh
(for schema in $(gsettings list-schemas); do gsettings list-recursively $schema; done) | grep '<Super>'
#+end_src
来找到有问题的快捷键被哪个东西占了，然后使用
#+begin_src sh
gsettings set org.gnome.settings-daemon.plugins.media-keys rotate-video-lock-static \[\'XF86DRotationLockToggle\'\]
#+end_src
来取消绑定，这个快捷键就能够正常使用了。

使用 ibus-rime 来进行中文输入
#+begin_src sh
apt install ibus-rime
#+end_src
为使 ibus-rime 横排显示需要在 ibus-rime.yaml 中加入
#+begin_src yaml
style:
   horizontal: true
#+end_src
同时需要修改 .profile
#+begin_src sh
export GTK_IM_MODULE=ibus
export QT_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
#+end_src
** KDE connect and GSconnect
GSConnect 是 Gnome 的一个 Extension 与 KDE connect 一样，其安卓 app 利用的就是 KDE connect 的 app。使用他就可以非常方便的进行手机和电脑的互操作。Enjoy!
** 无法 hibernate
:PROPERTIES:
:ID:       0a1ca188-5224-4e78-9315-ef8bcbc5318f
:END:
在 Linux 中，进行 Hibernate 较为复杂，主要参考的是 https://blog.ivansmirnov.name/how-to-set-up-hibernate-on-ubuntu-20-04/ 。我使用的是 swapfile 首先需要将 \/swapfile 扩大。可以参考的命令是
#+begin_src sh
swapoff
dd if=/dev/zero of=/swapfile bs=1M count=$((SIZE*1024))
mkswap /swapfile
swapon /swapfile
#+end_src
之后可能需要更改一下 /etc/fstab， 通过以下命令来获得 swapfile 的 UUID 和 offset。
#+begin_src sh
RESUME_PARAMS="resume=UUID=$(findmnt / -o UUID -n) resume_offset=$(sudo filefrag -v /swapfile|awk 'NR==4{gsub(/\./,"");print $4;}') "
#+end_src
更新 grub 以及 Linux-kernel 镜像就完成了，将上述的变量的字符串加入 /etc/default/grub 文件，中的 GRUB\_CMDLINE\_LINUX\_DEFAULT ，例如
#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash resume=UUID=18ec5634-548e-40ef-8629-aca25a6eeb00 resume_offset=18003967"
#+end_src
然后将 RESUME_PARAMS 写入 /etc/initramfs-tools/conf.d/resume。之后运行
#+begin_src sh
update-initramfs -c -k all
#+end_src
这样 hibernate 应该能正常进行了。

如果还有问题，可以使用以下的命令来对 hibernate 的问题进行调试了
#+begin_src sh
journalctl -xe
dmesg | less
vim /var/log/pm-suspend.log
systemctl status hibernate
#+end_src
同时由于 Lenovo 的问题，因此，我们 ELAN touchpad 被错误地认为了 touchscreen。我们要解决这个问题，可以使用 systemctl 的 service。参考 https://bugzilla.kernel.org/show_bug.cgi?id=207759#c17
#+begin_src sh :title /etc/tsmove
#!/bin/bash
modprobe i2c_hid
echo "i2c-ELAN0001:00" > /sys/bus/i2c/drivers/elants_i2c/unbind
echo "i2c-ELAN0001:00" > /sys/bus/i2c/drivers/i2c_hid/bind
#+end_src
以及
#+begin_src conf :title /etc/system/touchscreen.service
[Unit]
Description=Move touchscreen to correct driver

[Service]
ExecStart=/etc/tsmove
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
#+end_src
然后使用了
#+begin_src sh
systemctl enable touchscreen
systemctl start touchscreen
#+end_src
来解决这个问题，但是即使这样，但是由于在开机的过程中，这个错误的程序是无法加载的，因此也就会导致存储的文件无法正常使用，因此也就无法使用 hibernate 了。

* DONE 半自动化下载B站收藏夹视频
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: bilibili_favourites_download
:END:
其实就是使用 js 和大佬写的 [[https://github.com/soimort/you-get][you-get]] 工具。由于学艺不精（对于前端还有命令行并不了解）只能使用半自动化的方法，希望能够有人提出更好的方案。


1. 首先打开收藏夹，然后打开控制台，使用以下代码获得页面中所有视频的链接。
   #+begin_src c
list = $x("/html/body/div[2]/div[4]/div/\
div[1]/div[2]/div[3]/ul[1]/li/a[2]")
myhref = [];
list.forEach(function(elm){
        myhref.push(elm.href);
    })
   #+end_src
2. 使用你喜爱的编辑器将逗号换成空格。（大概也可以使用命令行实现，但是我不会。）
3. 然后使用 you-get 下载就大功告成了。


PS:由于我是VC爱好者很多时候我关心的并不是视频而是声音。因此需要使用 ffmpeg 工具提取声音。可以使用以下脚本。
#+begin_src sh
#!/usr/bin/env zsh

for i in *.flv; do
    name=${i:t:r}
    echo $name;
    output="$HOME/Music/Bilibili/$name.mp3"
    if [ ! -f $output ]; then
        ffmpeg -i $i -b:a 128k -vn $output; # 比特率128k
    fi
done
#+end_src

注意最好使用 zsh, 因为 bash 对于字符串中的空格似乎有奇怪的处理方式会导致莫名奇妙的问题。[fn:1:2019-10-20 Update 修改了zsh 的代码，因为在处理文件名时出现了问题。]

另外 Markdown 似乎有诡异的设定。如果在一个处在列表中的代码块指定了语言，列表的排序似乎会出现一些奇怪的情况。更多的讨论可见https://stackoverflow.com/questions/18088955/markdown-continue-numbered-list

* DONE Windows 装机指南
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: windows_configuration
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :showtoc true
:END:
** 常用软件

Office: 请卸载 OneNote UWP 版后，重新下载。
In powershell:
#+begin_src powershell
Get-AppxPackage *OneNote* | Remove-AppxPackage
#+end_src


从这里 https://www.onenote.com/download# 下载

Firefox （也可用 Edge）
http://www.firefox.com.cn/
使用全球服务同步,导入 switchOmega 配置
考虑使用 dogedoge 作为搜索引擎

Vscode: R, R lsp client, Remote WSL, Remote ssh

PotPlayer： http://potplayer.daum.net/ （被墙） http://www.potplayercn.com/
Bandzip： https://www.bandisoft.com/bandizip/
FoxitReader： https://www.foxitsoftware.cn/
Sumatra PDF:  https://www.sumatrapdfreader.org/download-free-pdf-viewer.html
使用 https://www.irfanview.com/ 对 org-download 提供截屏功能。需要手动加入 PATH，同时 irfanview 是非常优秀的图片浏览工具，用于替代默认的图片浏览器。

** 其他软件
Nutstore:  https://www.jianguoyun.com/s/downloads

Flux: 护眼 https://justgetflux.com/
Q-dir: http://www.softwareok.com/?seite=Freeware/Q-Dir
FDM: https://www.freedownloadmanager.org/zh/
Foobar2000:  https://www.foobar2000.org/download
Ditto: https://ditto-cp.sourceforge.io/
CopyTranslator: https://github.com/CopyTranslator/CopyTranslator#tap-to-copyexperimental
Goldendict: https://sourceforge.net/projects/goldendict/files/

Powershell 允许用户脚本
#+begin_src powershell
set-executionpolicy remotesigned
#+end_src

编辑 $PROFILE 文件加入以下代码
#+begin_src powershell
Import-Module PSReadLine
# zsh-like menu complete, for bash-like use `Complete`
Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete
#+end_src

启动脚本，关闭 cmd，使用 vbs
#+begin_src visualbasic
CreateObject("WScript.Shell").Run "wsl.exe ec", 0, False
#+end_src

TeXmacs
http://texmacs.org/tmweb/home/welcome.en.html


AutoHotKey
https://www.autohotkey.com/
disable.ahk

禁用了 Windows Hotkey.

以下代码禁止锁屏
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System DisableLockWorkstation 1

** 实用工具
Trojan: https://github.com/trojan-gfw/trojan/releases
指南见: https://manateelazycat.github.io/proxy/2020/03/17/best-proxy.html
Wox: https://github.com/Wox-launcher/Wox/releases

考虑使用 https://github.com/Wox-launcher/Wox/issues/634 的方法来保存/恢复配置文件
非常好用的启动工具，集成了 Everything，可以在一个界面中同时搜索文件和程序。但是 Clipboard 插件似乎有些一些问题，因此我是用 Ditto 进行替代。

Everything： https://www.voidtools.com/zh-cn/
最强大和快速的文件搜索工具，部分可被 Listary 替代，但是 Wox 提供了集成。

Listary: https://www.listary.com/
只需要使用免费功能，其中最重要的两个功能：一是增强Windows的搜索功能和文件选择窗口的功能，二是在文件位置选择中用Ctrl-G在定位到资源管理器的位置。付费版较贵，但是很好用。免费版有一些功能缺失。

Directory Opus： https://www.gpsoft.com.au/
使用盗版（捂脸），替代 Windows 默认的垃圾管理器。
免费替代：QTTabBar： http://qttabbar.wikidot.com/
使用参考： https://sspai.com/post/52521
缺少 restore closed tab，和自动保存 tab 的功能。
Windows Terminal Preivew: Windows Store
PowerToys: https://github.com/microsoft/PowerToys/releases/
考虑在设置-系统-多任务处理中取消窗口对其显示能在其旁边对齐的内容的选项。使用 PowerToys 进行窗口管理，批量重命名和选取颜色。

Recoll: 官网必须付费，可以找到免费版的下载，根据内容检索文件。

字体: https://github.com/be5invis/Iosevka 和 https://github.com/be5invis/Sarasa-Gothic/releases

Windows Terminal 设置快捷键和默认打开路径
#+begin_src js
"startingDirectory": "//wsl$/Ubuntu-20.04/home/zenith-john"
 { "command": { "action": "splitPane", "split": "auto", "splitMode": "duplicate" }, "keys": "alt+shift+d" },
 { "command": { "action": "switchToTab", "index": 0 }, "keys": "alt+1" },
 { "command": { "action": "switchToTab", "index": 1 }, "keys": "alt+2" },
 { "command": { "action": "switchToTab", "index": 2 }, "keys": "alt+3" },
 { "command": { "action": "switchToTab", "index": 3 }, "keys": "alt+4" },
 { "command": { "action": "switchToTab", "index": 4 }, "keys": "alt+5" },
 { "command": { "action": "switchToTab", "index": 5 }, "keys": "alt+6" },
 { "command": { "action": "switchToTab", "index": 6 }, "keys": "alt+7" },
 { "command": { "action": "switchToTab", "index": 7 }, "keys": "alt+8" },
 { "command": { "action": "switchToTab", "index": 8 }, "keys": "alt+9" }
#+end_src


Windows sshfs： https://github.com/billziss-gh/sshfs-win/releases 和 https://github.com/billziss-gh/winfsp/releases 要使用 sshfs.k 作为前缀来使用 .ssh 中的 ip 凭证，但是无法使用 .ssh/config 的配置
使用了新方案https://www.nsoftware.com/sftp/drive/ 虽然免费版有所不足，但是也比 sshfs 稍好用一些，至少不会弹出链接中断的问题。
** WSL
In powershell
#+begin_src powershell
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
#+end_src

然后使用 Store 安装 Ubuntu

可以考虑使用 WSL2，首先启用虚拟机平台功能和相关的内核包 https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package
#+begin_src powershell
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
#+end_src

使用
#+begin_src powershell
wsl --list --verbose
wsl --set-version <distribution name> <versionNumber>
#+end_src

来进行 wsl 版本管理。
WSL2 事实上是一个轻量的虚拟机，主要的问题是 WSL2 与 Windows 文件系统的交互速度很慢（远慢于 Linux 下挂载 ntfs 的速度），其原因未知。

WSL X server 设置
#+begin_src bash
export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0 # in WSL 2
#+end_src



Mobaxterm （X410 is good but too expensive, mobaxterm is good enough）
https://mobaxterm.mobatek.net/
使用我购买的 X410（Windows Store）.
** VSCode
使得 vscode 在 terminal 中不捕捉 C+e, C+k
#+begin_src javascript
    {
        "key": "ctrl+e",
        "command": "ctrl+e",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+k",
        "command": "ctrl+k",
        "when": "terminalFocus"
    }
#+end_src


在 terminal 和 editor 之间切换
#+begin_src javascript
	  {
        "key": "ctrl+'",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+'",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    }
#+end_src

配置文件地址
%APPDATA%\Code\User

* DONE Emacs mu4e 配置
SCHEDULED: <2021-08-19 Thu>
:PROPERTIES:
:EXPORT_FILE_NAME: mu4e
:END:
** Offlineimap
首先我们需要使用 Offlineimap 来获取服务器上的邮件。我们需要准备几个文件，一是 ~/.offlineimaprc 如下
#+begin_src conf
[general]
accounts = Foxmail, Tsinghua
pythonfile = ~/.offlineimap.py

[Account Foxmail]
localrepository = LocalFoxmail
remoterepository = RemoteFoxmail
proxy = SOCKS5:172.26.240.1:10800

[Repository LocalFoxmail]
type = Maildir
localfolders = ~/Documents/Mail/Foxmail

[Repository RemoteFoxmail]
type = IMAP
remotehost = imap.qq.com
remoteuser = zenith-john@foxmail.com
remotepasseval = mailpasswd("foxmail")
ssl = yes
maxconnection = 1
sslcacertfile = /etc/ssl/certs/ca-certificates.crt

[Account Tsinghua]
localrepository = LocalTsinghua
remoterepository = RemoteTsinghua

[Repository LocalTsinghua]
type = Maildir
localfolders = ~/Documents/Mail/Tsinghua

[Repository RemoteTsinghua]
type = IMAP
remotehost = mails.tsinghua.edu.cn
remoteuser = znt21@mails.tsinghua.edu.cn
remotepasseval = mailpasswd("tsinghua")
ssl = yes
maxconnection = 1
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
#+end_src
其中的各项含义都较为显然，有趣的是我直接登入 Foxmail 经常获取邮件失败，挂了代理反而没有问题。注意这里没有使用原文存放密码，而是使用 ~/.offlineimap.py 中的 mailpasswd 函数使用 gpg 来获得密码。~/.offlineimap.py 代码如下：
#+begin_src python
import os
import subprocess

def mailpasswd(acct):
  acct = os.path.basename(acct)
  path = "/home/zenith-john/.passwd/%s.gpg" % acct
  args = ["gpg", "--use-agent", "--quiet", "--batch", "-d", path]
  try:
    return subprocess.check_output(args).strip()
  except subprocess.CalledProcessError:
    return ""
#+end_src
其中主要是使用 gpg 来获得密码。我们可以通过
#+begin_src bash
# 创建密钥
gpg --full-generate-key

# 加密
gpg -e -r RECIPIENT ~/.passwd/file
#+end_src
来创建加密后的文件。
** 使用 mu4e
使用 https://github.com/djcb/mu 获得代码，编译得到最新版本，并将 mu4e 加入加载路径。我们要将加入 smtp 服务器加入 ./.authinfo 其每一行类似
#+begin_src conf
machine * login * port * password **
#+end_src
注意要使用 mu4e 查看邮件，在编译时最好使用 xml2 以及 --with-mailutils 选项。

同时为了使用不同的邮件我加入了函数，使得在发送邮件时选择邮箱。一个样例配置如下。其中选择 ~mu4e-sent-message-behavior~ 需要设置为 ~\'delete~ 来使得在下载邮件时不会导致出现重复。
#+begin_src elisp
(setq mail-user-agent 'mu4e-user-agent
      user-full-name "Zenith John"
      message-send-mail-function 'smtpmail-send-it
      send-mail-function 'smtpmail-send-it)

(setq mu4e-get-mail-command "offlineimap"
      mu4e-update-interval 600
      mu4e-maildir-list "~/Documents/Mail"
      mu4e-view-use-old nil
      mu4e-sent-messages-behavior 'delete)

(setq mu4e-sent-folder "/Foxmail/Sent Messages"
      mu4e-drafts-folder "/Foxmail/Drafts"
      user-mail-address "zenith-john@foxmail.com"
      smtpmail-smtp-server "smtp.qq.com"
      smtpmail-local-domain "qq.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)

(defvar zenith/mu4e-account-alist
  '(("Foxmail"
     (mu4e-sent-folder "/Foxmail/Sent Messages")
     (mu4e-drafts-folder "/Foxmail/Drafts")
     (user-mail-address "zenith-john@foxmail.com")
     (smtpmail-smtp-server "smtp.qq.com")
     (smtpmail-local-domain "qq.com")
     (smtpmail-smtp-service 465)
     (smtpmail-stream-type ssl))
    ("Tsinghua"
     (mu4e-sent-folder "/Tsinghua/Sent Items")
     (mu4e-drafts-folder "/Tsinghua/Drafts")
     (user-mail-address "znt21@mails.tsinghua.edu.cn")
     (smtpmail-smtp-server "mails.tsinghua.edu.cn")
     (smtpmail-local-domain "mails.tsinghua.edu.cn")
     (smtpmail-smtp-service 465)
     (smtpmail-stream-type ssl))))

(defun zenith/mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                zenith/mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) zenith/mu4e-account-alist)
                             nil t nil nil (caar zenith/mu4e-account-alist))))
         (account-vars (cdr (assoc account zenith/mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

(add-hook 'mu4e-compose-pre-hook 'zenith/mu4e-set-account)

(require 'smtpmail)
(require 'mu4e)
#+end_src

接下来，就能很好地使用 mu4e 了。
